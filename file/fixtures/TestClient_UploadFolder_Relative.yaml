---
version: 1
interactions:
- request:
    body: '{}'
    form: {}
    headers:
      Content-Type:
      - application/json
      User-Agent:
      - Files.com Go SDK
    url: https://app.files.com/api/rest/v1/folders/file-fixtures
    method: POST
  response:
    body: '{"display_name":"file-fixtures","type":"directory","size":null,"crc32":null,"md5":null,"subfolders_locked?":false}'
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Length:
      - "114"
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Apr 2021 16:29:14 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - b8bdc37d-9a1c-4622-8e6c-5a0c96eafd24
    status: 201 Created
    code: 201
    duration: ""
- request:
    body: '{"mkdir_parents":"true"}'
    form: {}
    headers:
      Content-Type:
      - application/json
      User-Agent:
      - Files.com Go SDK
    url: https://app.files.com/api/rest/v1/file_actions/begin_upload/file-fixtures/TestClient_UploadFolder_Dot.yaml
    method: POST
  response:
    body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:15Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860860","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/23fc8e74-e5a5-4f9a-8cc5-ec493f6ced75?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162915Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=mwdV0Z9Of.cGPUheH2mjG6WhQUvLgqrsxjlCd8fLoEFopcKf0y0LAWbD2MVMDSLVvJRBeJY2adBzOHc1JMtlzd025r5gKKN5.CgEjk0fMgky96_hlP8dDxAJjEP8kfuo\u0026X-Amz-Signature=0ac02fab27d0cf8142686db4a52434e9d5f3ea0fc8944402c289ec553e58e155"}]'
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Apr 2021 16:29:15 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - 0694bcc5-a533-4524-8af9-2b371d2333a6
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: '{"mkdir_parents":"true"}'
    form: {}
    headers:
      Content-Type:
      - application/json
      User-Agent:
      - Files.com Go SDK
    url: https://app.files.com/api/rest/v1/file_actions/begin_upload/file-fixtures/TestClient_UploadFolder.yaml
    method: POST
  response:
    body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:15Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860859","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/493f7a96-76ef-496e-9f36-707316dcb16d?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162915Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=OjJ.pHv5Xp_ig7XEhuZZh4h6qMCEwuj5NDYw53hx3CTOLA3jBkHKenvCxzmoV.GZdTypSsy4YH.GC4p36bATrmNVsyBC9crWgSx_9yl1qnCNuy3jyszvOavD1fmOdEKN\u0026X-Amz-Signature=cffd83e151622d102b3aab3183b6adb6388cbde3ad039396526972f47ff23e23"}]'
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Apr 2021 16:29:15 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - 202621b9-a856-4ae2-91f0-dbcbccce7d6f
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: |
      ---
      version: 1
      interactions:
      - request:
          body: '{}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/folders/golib
          method: POST
        response:
          body: '{"display_name":"golib","type":"directory","size":null,"crc32":null,"md5":null,"subfolders_locked?":false}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "106"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:10 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 997fd1fd-33f3-4605-ac86-668f7fe8d8ac
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/bool.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860492","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/6293b411-2a63-4544-90df-c3f0ee9adbf6?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=.L1EDAM9eArHJ6mNuVgBYH78JgEez7Uu99z2IT4Z0eaovR6Qrwj06G0xUqtEjkgQA2NEtY8_nsUyy7QnE1IWbm5SLYq5asA_nFw6cgEmY8Zfity1PSC0f1DEacICmtyh\u0026X-Amz-Signature=04f1a6ffdcd9e4029f7c5fbd6b832f75b02054288d37c1c214924c2f5a644282"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 8c1e5b0d-3e0d-4b17-b8c6-66f7940dfc4e
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/progresswriter.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860488","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/0c612446-3139-4287-aa05-717759a77e76?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=RMoWZyY30fPBeUXwp6G3EaysiNgnp1nZOdknirQB0o9YPI5x3wTn8QmeGTjn.8G8Hg9L9A3fm5D9OWEDfu86mjiE.0IXG.5_ouwxxCnh3P_Xz3rEAdkaGHztL_DEF0dL\u0026X-Amz-Signature=d6c1b4024ba3134aaa1b9242af2734d874d1bb29276a2c7e88c776e42a5944c4"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 9b5a394c-0c4b-4163-b959-e9a9f3134d3d
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/required_test.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860489","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/f2345b32-1ec7-42f6-acf0-f5f09b22f26f?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=smiiOdOEW0ROqsNgD8ShizuI5mcguE0xNRi7NQ2VRkAbkAqARurcqEMAizX.vVXKvHRDUU6Vgvh7w.BRUahk4le76hSN9JG8U0hd7Qe77Sd74QZY527RzCJ7ofHHwSs9\u0026X-Amz-Signature=10dc0cb115841f17cd942cc05e4da05944dd25a9a2f4454aad45f41c7061c2cc"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 2c0f837d-d007-4830-9118-cbead33bb19f
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/export_params.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860491","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/28c3a473-601c-47af-ab43-c8d877983ae3?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=Pzo1jOcuxeFgVFPbqldqOA0faawHjtNAxWsfJr83khKP5YasNUnf2aw4qHVNLI.P8lEUh4XY_rpMcRUzC6N_V7_7Ia1UJHi2VA02ZOE.sJWhnvrJQN1E.KgTtkDAYmIe\u0026X-Amz-Signature=9e9e87e67573ef8c7e9945739475ae0f87128beba56dd005e007aed7e771e393"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - ba162c4b-8741-478a-8dab-67e9993d5820
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/string.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860495","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/eaf3f8d4-8d27-4c78-9375-3a40e1b54d80?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=pAbvwD56SqQBhL8V30E_n2wYgszIuLOnckJQorLTXwp_mIgdCkcmLWEYpG6M_MK_YuHR3pr0cBpe_JFJSaruvRSU0SJH_OodUj0BlIGxP8pLeSs3RvaJe87RPZaLhTe4\u0026X-Amz-Signature=051d88474e661113b77a14f90bbaf965d42a6d86e8b17a542f5b4189716dab71"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 0b05445d-859a-45b1-9bfa-d2cf3ef2cae3
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/iter_test.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860499","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/2abf3173-e649-45f3-8491-0e8bcb1edf2c?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=lt33t4Q4_.VmZodZwmoC2p.2sCtG3JFbwgIETSvV12FNs.qZVOV2tVwHIIuJm7FYsKlMRcnIp4rcnuar4FAyrINBjblltm324c12k.VUNkEpSiVL1zvxJNeMkuxfZ9ak\u0026X-Amz-Signature=f36eb1b5dc2bd35184e215664397aabf2354feb9fe5604d23b66904f2c21e651"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 5c017f1d-80ce-4d74-8bb5-3d13daa996e5
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/interface.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860494","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/da25acf3-4ee0-4267-8e6f-eb40629f6f26?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=QZKcyh1WwG5mTXYn30CMaNN1WUQATl.3v0KbU2ZCyGH9gOxGNMudU0qOskXN2F_4SUiw4GwyCaSHbwn3slNhMIVJJLtr8W90IY_anTDCjFvDcj80mKVBwFjHhvhm5Bjv\u0026X-Amz-Signature=fbec6796ea00174fc08d6db1dd0b51386529f7e3b549935769f4abc6fceaea20"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - a79cf4dc-ae0e-45cd-8a18-7b7c8147ec46
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/iter.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860490","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/d078fafa-a024-4750-a9c6-a94f94400688?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=8BE0vKnxcFOqNSm1jAmoJKorsOcgXyPzqHUHV2lHkWfCk4rs0eZM_yCV8P3XyU47CDaTnjcMEaJj8mIYxEq4_S2minYCJ0l1cJ8lWlWHAScnE6tY4kieZmjFD2spzGsZ\u0026X-Amz-Signature=2f6212653c6aec0e06406dfe35cff7d9fda97fab1efce49ea92a4828121dd5ea"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - d3dade22-80bc-4d91-baaf-70c9fbaf61ac
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/required.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860498","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/f1357373-6cc0-4958-b69f-d6206f68531d?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=NyqdEvIKAStAk5SG2MZrDA8sSiLOUOXfyKnl.nQgSIJq3WZDQVxGa4MpTzrlOpY7jaAmKJm_J9jJlqKV.D.mgBzE1Cfvo2R25RQTAaVU5n9wO.JlZprqHnDUcap2dTib\u0026X-Amz-Signature=72b97558a60a8ef456e2155ad0c5d93e6f51f953ea25d84861064b7a5e3f2aab"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 2e76056c-213c-405e-882e-2be816dfcb3f
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/query.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860501","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/9a9b6e6e-13e7-4a80-9463-8e85a4e0c172?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=lS3nvnnFZ6wMMxYLl4VfQ8Z8NokvWMhxoUctXVVIBshSU2UNGmIxgFWTX45IHkkf9LVvHFyJkrFmvqVwLynoBmwPygfzypdt9VvJcPPa9STbWiBtGqvyPaBn1zIk0APZ\u0026X-Amz-Signature=a0ba4180f961b8b910b744bf6c866b447d5e075514f564199ddd377fc4b22891"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - a223a8f7-ad7b-4d4a-aab9-8e283c7acc3e
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nfunc String(string string) *string {\n\treturn &string\n}\n"
          form: {}
          headers:
            Content-Length:
            - "68"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/eaf3f8d4-8d27-4c78-9375-3a40e1b54d80?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=pAbvwD56SqQBhL8V30E_n2wYgszIuLOnckJQorLTXwp_mIgdCkcmLWEYpG6M_MK_YuHR3pr0cBpe_JFJSaruvRSU0SJH_OodUj0BlIGxP8pLeSs3RvaJe87RPZaLhTe4&X-Amz-Signature=051d88474e661113b77a14f90bbaf965d42a6d86e8b17a542f5b4189716dab71
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"cecd1ea94155ea41d1f8f9e0c2f2e0d9"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - T9BfOxHECUMiIftibJ7srY03HerNKIJe4yzczBElt6dAx99r6Neb8BVRa0fEN9rGjTxEAiQQbc0=
            X-Amz-Request-Id:
            - X92TXK3G21BZ4JWW
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nfunc Bool(bool bool) *bool {\n\treturn &bool\n}\n"
          form: {}
          headers:
            Content-Length:
            - "58"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/6293b411-2a63-4544-90df-c3f0ee9adbf6?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=.L1EDAM9eArHJ6mNuVgBYH78JgEez7Uu99z2IT4Z0eaovR6Qrwj06G0xUqtEjkgQA2NEtY8_nsUyy7QnE1IWbm5SLYq5asA_nFw6cgEmY8Zfity1PSC0f1DEacICmtyh&X-Amz-Signature=04f1a6ffdcd9e4029f7c5fbd6b832f75b02054288d37c1c214924c2f5a644282
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"83789abda0845357c13aa5fa9c8605a2"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - k8Poy25nqnI1RwdkDJKp7FBS9He3eqLqXWYaQIojvtqwC1BYx+vaYghI/6KRsY90Rwme+7zzSfw=
            X-Amz-Request-Id:
            - X92H51N5T1VC76WG
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nimport (\n\t\"net/url\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nvar
            QueryEscape = url.QueryEscape\n\nfunc PathEscape(path string) string {\n\tpathParts
            := strings.Split(path, \"/\")\n\tnewParts := make([]string, len(pathParts))\n\n\tfor
            i, part := range pathParts {\n\t\tnewParts[i] = url.PathEscape(part)\n\t}\n\n\treturn
            strings.Join(newParts, \"/\")\n}\n\nfunc BuildPath(resourcePath string, unescapedPath
            string) string {\n\tviaOS := filepath.Join(resourcePath, PathEscape(unescapedPath))\n\treturn
            strings.Join(strings.Split(viaOS, string(os.PathSeparator)), \"/\")\n}\n"
          form: {}
          headers:
            Content-Length:
            - "549"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/9a9b6e6e-13e7-4a80-9463-8e85a4e0c172?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=lS3nvnnFZ6wMMxYLl4VfQ8Z8NokvWMhxoUctXVVIBshSU2UNGmIxgFWTX45IHkkf9LVvHFyJkrFmvqVwLynoBmwPygfzypdt9VvJcPPa9STbWiBtGqvyPaBn1zIk0APZ&X-Amz-Signature=a0ba4180f961b8b910b744bf6c866b447d5e075514f564199ddd377fc4b22891
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"896d351744edbb4420bd736284a1a288"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - l8GW5tn3ZAPfTaL9RcryFU/qiB6qtZh7MJSXjLeQkqiMkYDnxp1smArX33i7f+FpuB+lcTHJK2U=
            X-Amz-Request-Id:
            - X92M2HF57S6GEPN0
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nfunc Interface() interface{} {\n\tvar i interface{}\n\treturn
            i\n}\n"
          form: {}
          headers:
            Content-Length:
            - "75"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/da25acf3-4ee0-4267-8e6f-eb40629f6f26?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=QZKcyh1WwG5mTXYn30CMaNN1WUQATl.3v0KbU2ZCyGH9gOxGNMudU0qOskXN2F_4SUiw4GwyCaSHbwn3slNhMIVJJLtr8W90IY_anTDCjFvDcj80mKVBwFjHhvhm5Bjv&X-Amz-Signature=fbec6796ea00174fc08d6db1dd0b51386529f7e3b549935769f4abc6fceaea20
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"f7cb73244af2aafb2ced638dc9658dee"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - dNsdD86LUgR22xbKveKRsc9Gsx5deW6vUBKtT33EBstrjWiMHKyTWLw78LPLXL7uRUGWkPFAI4M=
            X-Amz-Request-Id:
            - X92GT0NP01YMVGGJ
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nimport (\n\t\"net/url\"\n\n\t\"github.com/appscode/go-querystring/query\"\n)\n\nfunc
            ExportParams(i interface{}) (url.Values, error) {\n\tv, err := query.Values(i)\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn v, CheckRequired(i, &v)\n}\n"
          form: {}
          headers:
            Content-Length:
            - "231"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/28c3a473-601c-47af-ab43-c8d877983ae3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=Pzo1jOcuxeFgVFPbqldqOA0faawHjtNAxWsfJr83khKP5YasNUnf2aw4qHVNLI.P8lEUh4XY_rpMcRUzC6N_V7_7Ia1UJHi2VA02ZOE.sJWhnvrJQN1E.KgTtkDAYmIe&X-Amz-Signature=9e9e87e67573ef8c7e9945739475ae0f87128beba56dd005e007aed7e771e393
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"3cc6728f7554f3ea0f53dabed57b19d2"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - clsDqDduS6pz+2FPdAvUQY3D2IWYFEnqLt0QgnRzbRe7bet6IGL1X27QXCloLBbAK8lHkitac2k=
            X-Amz-Request-Id:
            - X92H47NDETRYPZFT
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"reflect\"\n\t\"strings\"\n)\n\nfunc
            CheckRequired(iStruct interface{}, values *url.Values) error {\n\tvar errors
            = make([]string, 0)\n\tval := reflect.ValueOf(iStruct)\n\tfor val.Kind() ==
            reflect.Ptr {\n\t\tif val.IsNil() {\n\t\t\treturn nil\n\t\t}\n\t\tval = val.Elem()\n\t}\n\n\tif
            iStruct == nil {\n\t\treturn nil\n\t}\n\n\tif val.Kind() != reflect.Struct {\n\t\treturn
            fmt.Errorf(\"CheckRequired expects struct input. Got %v\", val.Kind())\n\t}\n\n\ttyp
            := val.Type()\n\tfor i := 0; i < typ.NumField(); i++ {\n\t\tsf := typ.Field(i)\n\t\tif
            sf.PkgPath != \"\" && !sf.Anonymous { // unexported\n\t\t\tcontinue\n\t\t}\n\t\ttag
            := sf.Tag.Get(\"required\")\n\t\turlTag := sf.Tag.Get(\"url\")\n\t\tkey := strings.Split(urlTag,
            \",\")[0]\n\n\t\tif tag == \"true\" && values.Get(key) == \"\" {\n\t\t\terrors
            = append(\n\t\t\t\terrors,\n\t\t\t\tCreateError(iStruct, sf.Name).Error(),\n\t\t\t)\n\t\t}\n\t}\n\tif
            len(errors) != 0 {\n\t\treturn fmt.Errorf(strings.Join(errors, \"\\n\"))\n\t}\n\treturn
            nil\n}\n\nfunc CreateError(i interface{}, name string) error {\n\tstructName
            := reflect.TypeOf(i).Name()\n\treturn fmt.Errorf(\"missing required field: %v{}.%v\",
            structName, name)\n}\n"
          form: {}
          headers:
            Content-Length:
            - "1087"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/f1357373-6cc0-4958-b69f-d6206f68531d?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=NyqdEvIKAStAk5SG2MZrDA8sSiLOUOXfyKnl.nQgSIJq3WZDQVxGa4MpTzrlOpY7jaAmKJm_J9jJlqKV.D.mgBzE1Cfvo2R25RQTAaVU5n9wO.JlZprqHnDUcap2dTib&X-Amz-Signature=72b97558a60a8ef456e2155ad0c5d93e6f51f953ea25d84861064b7a5e3f2aab
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"72556a26959c471a4b0bff38d08e558b"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - UqY4y8qSAdCjgHhrxCnu72V7yYcd0Gr9Yau27nfMFpn0yCGfUTQRaLo1xSAS1Bvt8dckjOhGpJc=
            X-Amz-Request-Id:
            - X92VGDP72N6BE8AW
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nimport \"io\"\n\ntype ProgressWriter struct {\n\tWriter
            \         io.Writer\n\tProgressWatcher func(int64)\n}\n\nfunc (w ProgressWriter)
            Write(p []byte) (n int, err error) {\n\tn, err = w.Writer.Write(p)\n\n\tw.ProgressWatcher(int64(n))\n\treturn
            n, err\n}\n"
          form: {}
          headers:
            Content-Length:
            - "250"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/0c612446-3139-4287-aa05-717759a77e76?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=RMoWZyY30fPBeUXwp6G3EaysiNgnp1nZOdknirQB0o9YPI5x3wTn8QmeGTjn.8G8Hg9L9A3fm5D9OWEDfu86mjiE.0IXG.5_ouwxxCnh3P_Xz3rEAdkaGHztL_DEF0dL&X-Amz-Signature=d6c1b4024ba3134aaa1b9242af2734d874d1bb29276a2c7e88c776e42a5944c4
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"a818d0badee418a848d9dc03b985b244"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - qB42dOwe9xl0z4TWRB8vWdTPJzfeUHKXyAjSQzhRtloZipoSeAS/pnFoPQahJcEXs83B7DLs1YE=
            X-Amz-Request-Id:
            - X92ZK2Y5XGBNQXMK
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nimport (\n\t\"testing\"\n\n\t\"github.com/appscode/go-querystring/query\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\ntype
            A struct {\n\tName   string `url:\"name\" required:\"true\"`\n\tAge    int    `url:\"age\"
            required:\"false\"`\n\tIgnore int    `url:\"-\" required:\"false\"`\n}\n\nfunc
            TestCheckRequired_Valid(t *testing.T) {\n\tassert := assert.New(t)\n\ta := A{Name:
            \"Dustin\", Age: 90, Ignore: 50}\n\tvalues, _ := query.Values(a)\n\n\terr :=
            CheckRequired(a, &values)\n\tassert.Equal(err, nil)\n}\n\nfunc TestCheckRequired_Invalid(t
            *testing.T) {\n\tassert := assert.New(t)\n\ta := A{Age: 90}\n\tvalues, _ :=
            query.Values(a)\n\n\terr := CheckRequired(a, &values)\n\tassert.EqualError(err,
            \"missing required field: A{}.Name\")\n}\n"
          form: {}
          headers:
            Content-Length:
            - "691"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/f2345b32-1ec7-42f6-acf0-f5f09b22f26f?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=smiiOdOEW0ROqsNgD8ShizuI5mcguE0xNRi7NQ2VRkAbkAqARurcqEMAizX.vVXKvHRDUU6Vgvh7w.BRUahk4le76hSN9JG8U0hd7Qe77Sd74QZY527RzCJ7ofHHwSs9&X-Amz-Signature=10dc0cb115841f17cd942cc05e4da05944dd25a9a2f4454aad45f41c7061c2cc
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"129a7a11d2f07ee5446398ff07588c99"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - wrkVay0PAFxirOQghmMvFyIuvHsPulzg69FZE1ZaIz49ETmPvxl49CHq9ByEJQKX+OMbkXA0gu8=
            X-Amz-Request-Id:
            - X92WJ1BQP201KGFR
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc
            TestIter_Next_MaxPages(t *testing.T) {\n\tassert := assert.New(t)\n\tparams
            := ListParams{}\n\tparams.Set(0, 5, \"\", 2)\n\tit := Iter{}\n\tit.ListParams
            = &params\n\n\tit.Query = func() (*[]interface{}, string, error) {\n\t\tret
            := make([]interface{}, params.PerPage)\n\n\t\treturn &ret, \"cursor\", nil\n\t}\n\trecordCount
            := 0\n\tfor it.Next() {\n\t\trecordCount += 1\n\t}\n\tassert.Equal(int(params.PerPage*params.MaxPages),
            recordCount)\n\tassert.Equal(nil, it.Err())\n\tassert.Equal(\"cursor\", it.GetCursor())\n}\n\nfunc
            TestIter_Next_ZeroMaxPages(t *testing.T) {\n\tassert := assert.New(t)\n\tparams
            := ListParams{}\n\tparams.Set(0, 2, \"\", 0)\n\tpages := make([][]interface{},
            0)\n\tpages = append(pages, make([]interface{}, params.PerPage))\n\tpages =
            append(pages, make([]interface{}, params.PerPage))\n\tpages = append(pages,
            make([]interface{}, 0))\n\tit := Iter{}\n\tit.ListParams = &params\n\n\tit.Query
            = func() (*[]interface{}, string, error) {\n\t\tret := pages[:1][0]\n\t\tpages
            = pages[1:]\n\n\t\treturn &ret, \"cursor\", nil\n\t}\n\trecordCount := 0\n\tfor
            it.Next() {\n\t\trecordCount += 1\n\t}\n\tassert.Equal(4, recordCount)\n}\n\nfunc
            TestIter_Next_PerPage_of_one(t *testing.T) {\n\tassert := assert.New(t)\n\tparams
            := ListParams{}\n\tparams.Set(0, 1, \"\", 2)\n\tit := Iter{}\n\tit.ListParams
            = &params\n\tvar sliceOfSliceInterfaces [2][]interface{}\n\tsliceOfSliceInterfaces[0]
            = make([]interface{}, params.PerPage)\n\tsliceOfSliceInterfaces[1] = make([]interface{},
            0)\n\tresultCounter := 0\n\tit.Query = func() (*[]interface{}, string, error)
            {\n\t\tret := sliceOfSliceInterfaces[resultCounter]\n\t\tresultCounter += 1\n\t\treturn
            &ret, \"cursor\", nil\n\t}\n\trecordCount := 0\n\tfor it.Next() {\n\t\trecordCount
            += 1\n\t\tassert.Equal(Interface(), it.Current())\n\t}\n\tassert.Equal(1, recordCount)\n}\n"
          form: {}
          headers:
            Content-Length:
            - "1768"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/2abf3173-e649-45f3-8491-0e8bcb1edf2c?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=lt33t4Q4_.VmZodZwmoC2p.2sCtG3JFbwgIETSvV12FNs.qZVOV2tVwHIIuJm7FYsKlMRcnIp4rcnuar4FAyrINBjblltm324c12k.VUNkEpSiVL1zvxJNeMkuxfZ9ak&X-Amz-Signature=f36eb1b5dc2bd35184e215664397aabf2354feb9fe5604d23b66904f2c21e651
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"4a67a49b0a254d1698fb963d7011aebd"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - LZbD9+9cgT0H67KzwRwEC2JNHPw0KSPFEB5ekVC1C5OiNa9G1AigKIJmdDwSpUPvB4sUel/wgI4=
            X-Amz-Request-Id:
            - X92WPZXE27QCNSJM
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package lib\n\nimport (\n\t\"net/url\"\n)\n\ntype ListParams struct {\n\tPage
            \    int64  `json:\"page,omitempty\" url:\"page,omitempty\" required:\"false\"`\n\tPerPage
            \ int64  `json:\"per_page,omitempty\" url:\"per_page,omitempty\" required:\"false\"`\n\tCursor
            \  string `json:\"cursor,omitempty\" url:\"cursor,omitempty\" required:\"false\"`\n\tMaxPages
            int64  `json:\"-\" url:\"-\"`\n}\n\n// ListParamsContainer is a general interface
            for which all list parameter\n// structs should comply. They achieve this by
            embedding a ListParams struct\n// and inheriting its implementation of this
            interface.\ntype ListParamsContainer interface {\n\tGetListParams() *ListParams\n}\n\n//
            GetListParams returns a ListParams struct (itself). It exists because any\n//
            structs that embed ListParams will inherit it, and thus implement the\n// ListParamsContainer
            interface.\nfunc (p *ListParams) GetListParams() *ListParams {\n\treturn p\n}\n\nfunc
            (p *ListParams) Set(page int64, perPage int64, cursor string, maxPages int64)
            {\n\tp.Page = page\n\tp.PerPage = perPage\n\tp.Cursor = cursor\n\tp.MaxPages
            = maxPages\n}\n\ntype Query func() (*[]interface{}, string, error)\n\ntype Iter
            struct {\n\tQuery\n\tListParams   ListParamsContainer\n\tParams       []interface{}\n\tCurrentIndex
            int\n\tValues       *[]interface{}\n\tCursor       string\n\tError        error\n}\n\n//
            Err returns the error, if any,\n// that caused the Iter to stop.\n// It must
            be inspected\n// after Next returns false.\nfunc (i *Iter) Err() error {\n\treturn
            i.Error\n}\n\nfunc (i *Iter) Current() interface{} {\n\treturn (*i.Values)[i.CurrentIndex]\n}\n\nfunc
            (i *Iter) GetParams() *ListParams {\n\treturn i.ListParams.GetListParams()\n}\n\nfunc
            (i *Iter) ExportParams() (url.Values, error) {\n\tparamValues, err := ExportParams(i.GetParams())\n\tif
            err != nil {\n\t\treturn paramValues, err\n\t}\n\tlistParamValues, _ := ExportParams(i.ListParams)\n\n\tfor
            key, value := range paramValues {\n\t\tlistParamValues.Set(key, value[0])\n\t}\n\n\tif
            i.GetCursor() != \"\" {\n\t\tlistParamValues.Del(\"page\")\n\t}\n\n\treturn
            listParamValues, nil\n}\n\nfunc (i *Iter) GetPage() bool {\n\tif i.GetParams().MaxPages
            != 0 && i.GetParams().Page == i.GetParams().MaxPages {\n\t\treturn false\n\t}\n\n\ti.GetParams().Page
            += 1\n\ti.Values, i.Cursor, i.Error = i.Query()\n\ti.SetCursor(i.Cursor)\n\treturn
            i.Error == nil && len(*i.Values) != 0\n}\n\nfunc (i *Iter) EOFPage() bool {\n\treturn
            len(*i.Values) == i.CurrentIndex+1\n}\n\nfunc (i *Iter) GetCursor() string {\n\treturn
            i.GetParams().Cursor\n}\n\nfunc (i *Iter) SetCursor(cursor string) {\n\ti.GetParams().Cursor
            = cursor\n\ti.Cursor = cursor\n}\n\n// Next iterates the results in i.Current()
            or i.`ResourceName`().\n// It returns true until there are no results remaining.\n//
            To adjust the number of results set ListParams.PerPage.\n// To have it auto-paginate
            set ListParams.MaxPages, default is 1.\n//\n// To iterate over all results use
            the following pattern.\n//\n//   for i.Next() {\n//     i.Current()\n//   }\nfunc
            (i *Iter) Next() bool {\n\tif i.Values == nil {\n\t\treturn i.GetPage() && len(*i.Values)
            > 0\n\t} else if len(*i.Values) > i.CurrentIndex+1 {\n\t\ti.CurrentIndex +=
            1\n\t\treturn true\n\t}\n\n\tif len(*i.Values) == int(i.GetParams().PerPage)
            {\n\t\ti.CurrentIndex = 0\n\t\treturn i.GetPage()\n\t}\n\n\treturn false\n}\n"
          form: {}
          headers:
            Content-Length:
            - "3133"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/d078fafa-a024-4750-a9c6-a94f94400688?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=8BE0vKnxcFOqNSm1jAmoJKorsOcgXyPzqHUHV2lHkWfCk4rs0eZM_yCV8P3XyU47CDaTnjcMEaJj8mIYxEq4_S2minYCJ0l1cJ8lWlWHAScnE6tY4kieZmjFD2spzGsZ&X-Amz-Signature=2f6212653c6aec0e06406dfe35cff7d9fda97fab1efce49ea92a4828121dd5ea
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Etag:
            - '"e9ea3460b609e2e5cc8e297aee42f49d"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - Cky5oXOsFMi1b5Rxnmzybt0Gom/Cl15w9kH7DbX6G8DhcRfzon2NQQ9wX2Q9s1t4dIeYSpt3S+Y=
            X-Amz-Request-Id:
            - X92JNA9RSDPVDX52
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"3cc6728f7554f3ea0f53dabed57b19d2\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860491","size":"231"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/export_params.go
          method: POST
        response:
          body: '{"path":"golib/export_params.go","display_name":"export_params.go","type":"file","size":231,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "267"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 3872c9c0-81ca-453b-a096-250f3d686993
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"129a7a11d2f07ee5446398ff07588c99\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860489","size":"691"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/required_test.go
          method: POST
        response:
          body: '{"path":"golib/required_test.go","display_name":"required_test.go","type":"file","size":691,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "267"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 141e6386-f32a-4d5d-a15e-576b14e9e9e0
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"f7cb73244af2aafb2ced638dc9658dee\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860494","size":"75"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/interface.go
          method: POST
        response:
          body: '{"path":"golib/interface.go","display_name":"interface.go","type":"file","size":75,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "258"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 362eb161-25d5-4388-b15b-2192f65659c2
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"cecd1ea94155ea41d1f8f9e0c2f2e0d9\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860495","size":"68"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/string.go
          method: POST
        response:
          body: '{"path":"golib/string.go","display_name":"string.go","type":"file","size":68,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "252"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - b552c6f8-95ba-4c43-8362-029aa5d4ff0b
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"a818d0badee418a848d9dc03b985b244\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860488","size":"250"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/progresswriter.go
          method: POST
        response:
          body: '{"path":"golib/progresswriter.go","display_name":"progresswriter.go","type":"file","size":250,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "269"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - a2a794f9-5827-47ea-b95e-cda8048b61c8
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"4a67a49b0a254d1698fb963d7011aebd\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860499","size":"1768"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/iter_test.go
          method: POST
        response:
          body: '{"path":"golib/iter_test.go","display_name":"iter_test.go","type":"file","size":1768,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "260"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - c398e17b-463f-4dd8-a54b-3f0c002748cd
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"e9ea3460b609e2e5cc8e297aee42f49d\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860490","size":"3133"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/iter.go
          method: POST
        response:
          body: '{"path":"golib/iter.go","display_name":"iter.go","type":"file","size":3133,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "250"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 374aad43-8227-4bb7-9ce6-ffad699edf55
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"72556a26959c471a4b0bff38d08e558b\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860498","size":"1087"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/required.go
          method: POST
        response:
          body: '{"path":"golib/required.go","display_name":"required.go","type":"file","size":1087,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "258"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - c89fc900-6e33-4dd4-bb2d-6665f643ebc8
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"896d351744edbb4420bd736284a1a288\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860501","size":"549"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/query.go
          method: POST
        response:
          body: '{"path":"golib/query.go","display_name":"query.go","type":"file","size":549,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "251"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 9e9dda68-af0d-4322-ae66-191e106c4a21
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"83789abda0845357c13aa5fa9c8605a2\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860492","size":"58"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib/bool.go
          method: POST
        response:
          body: '{"path":"golib/bool.go","display_name":"bool.go","type":"file","size":58,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "248"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:11 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - df71e2c0-ba49-4b6b-bfac-bdb59371bf5d
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: ""
          form: {}
          headers:
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib
          method: DELETE
        response:
          body: '{"error":"Folder golib not empty","http-code":422,"instance":"4a5c05c6-0fe6-42c3-adc3-02e67f6a25d9","title":"Folder
            Not Empty","type":"processing-failure/folder-not-empty"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "172"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 4a5c05c6-0fe6-42c3-adc3-02e67f6a25d9
          status: 422 Unprocessable Entity
          code: 422
          duration: ""
      - request:
          body: ""
          form: {}
          headers:
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/golib?recursive=true
          method: DELETE
        response:
          body: ""
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 408c414d-3c42-4c8c-8d03-ed9b462de42f
          status: 204 No Content
          code: 204
          duration: ""
    form: {}
    headers:
      Content-Length:
      - "50695"
    url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/493f7a96-76ef-496e-9f36-707316dcb16d?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162915Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=OjJ.pHv5Xp_ig7XEhuZZh4h6qMCEwuj5NDYw53hx3CTOLA3jBkHKenvCxzmoV.GZdTypSsy4YH.GC4p36bATrmNVsyBC9crWgSx_9yl1qnCNuy3jyszvOavD1fmOdEKN&X-Amz-Signature=cffd83e151622d102b3aab3183b6adb6388cbde3ad039396526972f47ff23e23
    method: PUT
  response:
    body: ""
    headers:
      Content-Length:
      - "0"
      Date:
      - Wed, 14 Apr 2021 16:29:16 GMT
      Etag:
      - '"f58d6ccddc2d66a6914a02680ca7975d"'
      Server:
      - AmazonS3
      X-Amz-Id-2:
      - Y01DChUK0VHjzjb99sJfurmm73h36twkXnaXH8W+iBFltm6t9QgQefdGi8IW/XYMLShKxpq85fI=
      X-Amz-Request-Id:
      - 0AF9CKFHAXRPQ5TS
      X-Amz-Server-Side-Encryption:
      - AES256
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: |
      ---
      version: 1
      interactions:
      - request:
          body: '{}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/folders/go-from-dot
          method: POST
        response:
          body: '{"display_name":"go-from-dot","type":"directory","size":null,"crc32":null,"md5":null,"subfolders_locked?":false}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "112"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:12 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - de42cb60-ecd3-4ed7-aed7-7b582633393e
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/go-from-dot/fixtures/TestClient_UploadFolder.yaml
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:13Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860700","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/6f82ffb9-c06d-4851-a967-8acc2d98f334?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162913Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=SrBlGZ44t38kSaTqZT0FGfIZs91qhhnDheBQyC9tK4vAK6yLU.OEN1425BYddsHCAY1nncO3XkopKd61AV9ZN3_xvZm_KxPYOnxP7.NsMCZS08huDoPhiD8B68nD.vFC\u0026X-Amz-Signature=c2a81cb1a5dba8cbedb9a52ba79a270c21eead00750ab5edff080f518c33587e"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:13 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - d71b72a0-0249-4d37-851f-db2b7b0b7907
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/go-from-dot/download.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:13Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860698","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/b22dbe84-ae01-4921-8d68-be593d7c8193?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162913Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=9gfRAIhiCIm6259ZuX1gFjGwPtFvQNPQGcOJ2UmJdjhYOBa32e1YxN48xTZSsCeZ1BnFvxQZYvlXtgivv24KeLbMc.JkKpiOSdTba8JqwfIHKcKiFSE81vQzjZVPKRJ7\u0026X-Amz-Signature=5d43df5847b19973d162b0a634db025ec016716aebeb7c887b7a91941df17469"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:13 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 9588ddff-dc8d-402b-98af-166a33a4b23f
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/go-from-dot/upload.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:13Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860697","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/6e3376c2-7225-4603-a3e7-123b80e22eb6?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162913Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=XMDosLt98fCm4MU7dFjxZB27AgDb7sCmF_s4NnNYaZx3eC6fjE2_LioRCl5vAfLb5vuooEt7maFLKG19XPvK9v7ZTZ3OETZLawNs_giSO_givyApqWPkboYlOUHSs1K2\u0026X-Amz-Signature=e79f1f5b551b438b58ac74f19cdc725cf0f1afa2d5a4dcdf41b069fa30263ae9"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:13 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - fad8927e-d721-4785-8db3-94befeaba3af
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/go-from-dot/client.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:13Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860702","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/4076b7d3-6fbc-494a-b965-06578ea5ce37?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162913Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=6TMux1GyunZ6blVAJv2i7LF8h_cqwnoFeXwLE81XDEVurgXXXG6Nb3Oi7C888DBUgn78wEvjlrAsIAqJ66M3BVrFxUnXCHf2uhg54mesfIHRgPfAD43IpEWguiPkiE.k\u0026X-Amz-Signature=03edabd515a3780705fadcd42659ff28a5266c763d6981cc2c90d9618aff67c9"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:13 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - cefacf34-a206-4d18-8c2c-27fbe3fecf96
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"mkdir_parents":"true"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/file_actions/begin_upload/go-from-dot/client_test.go
          method: POST
        response:
          body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:13Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860699","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/67198d86-20b5-48d8-bcfa-77ccf4fa965b?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162913Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=aXE9uUGeWO.I8Fg6xrPXyLS.2gMhZAEZrnoqS1au7aZhuMpTAughM8DYEUtLH1a9ZEK0J4NkWdOdQF62HjNdchDZ845RW.mt5dq99gbRW7la5gbYI4XUNSQLPu0_GR8T\u0026X-Amz-Signature=5dffb304bf28a7445d5fb2881e4e310bca44f72fccb5ce0b6f3d49a8daec4660"}]'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:13 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - af26646d-c0f6-4f3a-a02f-bfa66c259437
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package file\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\tfiles_sdk
            \"github.com/Files-com/files-sdk-go\"\n\t\"github.com/Files-com/files-sdk-go/folder\"\n\t\"github.com/Files-com/files-sdk-go/lib\"\n\t\"github.com/zenthangplus/goccm\"\n)\n\nfunc
            (c *Client) DownloadToFile(params files_sdk.FileDownloadParams, filePath string)
            (files_sdk.File, error) {\n\tout, err := os.Create(filePath)\n\tif err != nil
            {\n\t\treturn files_sdk.File{}, err\n\t}\n\tparams.Writer = out\n\treturn c.Download(params)\n}\n\nfunc
            DownloadToFile(params files_sdk.FileDownloadParams, filePath string) (files_sdk.File,
            error) {\n\treturn (&Client{}).DownloadToFile(params, filePath)\n}\n\ntype fileDownload
            struct {\n\tfiles_sdk.File\n\tdestination string\n\terror\n}\n\nfunc (c *Client)
            DownloadFolder(params files_sdk.FolderListForParams, rootDestination string,
            reporters ...func(incDownloadedBytes int64, file files_sdk.File, destination
            string, err error, onlyMessage string, totalFiles int)) error {\n\trootDestinationIsDir
            := false\n\tif rootDestination != \"\" && rootDestination[len(rootDestination)-1:]
            == string(os.PathSeparator) {\n\t\trootDestinationIsDir = true\n\t} else {\n\t\trootDestination,
            _ := filepath.Abs(rootDestination)\n\t\tfi, err := os.Stat(rootDestination)\n\t\tif
            err == nil && fi.Mode().IsDir() {\n\t\t\trootDestinationIsDir = true\n\t\t}\n\t}\n\n\tgoc
            := goccm.New(10)\n\tfiles := c.index(params)\n\tif len(files) > 1 {\n\t\trootDestinationIsDir
            = true\n\t}\n\tsignal := make(chan bool)\n\n\tsourceRootLen := len(strings.Split(params.Path,
            \"/\"))\n\tfor _, entity := range files {\n\t\tif entity.error != nil {\n\t\t\treturn
            entity.error\n\t\t}\n\t\tgo func(entity Entity) {\n\t\t\tgoc.Wait()\n\t\t\tfile
            := files_sdk.File{Path: entity.file.Path, Size: entity.file.Size, Type: entity.file.Type}\n\t\t\tsep
            := strings.Split(file.Path, \"/\")\n\t\t\tr := int(math.Min(float64(len(sep)-1),
            float64(sourceRootLen)))\n\t\t\tfilePathCompacted := strings.Join(sep[r:], string(os.PathSeparator))\n\t\t\tfilePath,
            fileName := filepath.Split(filePathCompacted)\n\t\t\tvar destinationPath string\n\t\t\tif
            rootDestinationIsDir {\n\t\t\t\tdestinationPath = filepath.Join(rootDestination,
            filePath, fileName)\n\t\t\t} else {\n\t\t\t\tdestinationPath = filepath.Join(rootDestination,
            filePath)\n\t\t\t}\n\t\t\tdir, _ := filepath.Split(destinationPath)\n\t\t\t_,
            err := os.Stat(dir)\n\t\t\tif os.IsNotExist(err) {\n\t\t\t\tos.MkdirAll(dir,
            0755)\n\t\t\t}\n\t\t\tout, err := os.Create(destinationPath)\n\t\t\tif err !=
            nil {\n\t\t\t\tif len(reporters) > 0 {\n\t\t\t\t\treporters[0](0, file, destinationPath,
            err, \"\", len(files))\n\t\t\t\t}\n\t\t\t}\n\t\t\tparams := files_sdk.FileDownloadParams{Path:
            file.Path}\n\t\t\twriter := lib.ProgressWriter{Writer: out}\n\t\t\twriter.ProgressWatcher
            = func(incDownloadedBytes int64) {\n\t\t\t\tif len(reporters) > 0 {\n\t\t\t\t\treporters[0](incDownloadedBytes,
            file, destinationPath, entity.error, \"\", len(files))\n\t\t\t\t}\n\t\t\t}\n\t\t\tparams.Writer
            = writer\n\t\t\tparams.OnDownload = func(response *http.Response) {\n\t\t\t\tfile.Size
            = response.ContentLength\n\t\t\t\tif len(reporters) > 0 {\n\t\t\t\t\treporters[0](0,
            file, destinationPath, entity.error, \"\", len(files))\n\t\t\t\t}\n\t\t\t}\n\t\t\twriter.ProgressWatcher(0)\n\t\t\tnewFile,
            err := c.Download(params)\n\t\t\tif len(reporters) > 0 && err != nil {\n\t\t\t\treporters[0](0,
            newFile, destinationPath, err, \"\", len(files))\n\t\t\t}\n\t\t\tsignal <- true\n\t\t\tgoc.Done()\n\t\t}(entity)\n\n\t}\n\tfor
            range files {\n\t\t<-signal\n\t}\n\tif len(files) == 0 {\n\t\tif len(reporters)
            > 0 {\n\t\t\treporters[0](0, files_sdk.File{}, params.Path, nil, \"No files
            to download\", 0)\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (c *Client) downloadNode(params
            files_sdk.FolderListForParams, rootDestination string, queuedDownloads *int,
            goc goccm.ConcurrencyManager, reporter *func(incDownloadedBytes int64, file
            files_sdk.File, destination string, err error), fileChannel *chan fileDownload)
            error {\n\tfolderClient := folder.Client{Config: c.Config}\n\tit, err := folderClient.ListFor(params)\n\n\tif
            err != nil {\n\t\treturn err\n\t}\n\n\taction := func(entry files_sdk.Folder)
            {\n\t\tdestinationPath := filepath.Join(rootDestination, entry.Path)\n\t\tdownload
            := fileDownload{destination: destinationPath, File: files_sdk.File{Path: entry.Path,
            Type: entry.Type, Size: entry.Size}}\n\t\tswitch entry.Type {\n\t\tcase \"directory\":\n\t\t\t_,
            err := os.Stat(destinationPath)\n\t\t\tif os.IsNotExist(err) {\n\t\t\t\tos.MkdirAll(destinationPath,
            0755)\n\t\t\t}\n\t\t\terr = c.downloadNode(files_sdk.FolderListForParams{Path:
            entry.Path}, rootDestination, queuedDownloads, goc, reporter, fileChannel)\n\t\t\tif
            err != nil {\n\t\t\t\tdownload.error = err\n\t\t\t}\n\t\tcase \"file\":\n\t\t\tdir,
            _ := filepath.Split(destinationPath)\n\t\t\t_, err := os.Stat(dir)\n\t\t\tif
            os.IsNotExist(err) {\n\t\t\t\tos.MkdirAll(dir, 0755)\n\t\t\t}\n\t\t\tout, err
            := os.Create(destinationPath)\n\t\t\tif err != nil {\n\t\t\t\tdownload.error
            = err\n\t\t\t\treturn\n\t\t\t}\n\t\t\tparams := files_sdk.FileDownloadParams{Path:
            entry.Path}\n\t\t\twriter := lib.ProgressWriter{Writer: out}\n\t\t\twriter.ProgressWatcher
            = func(incDownloadedBytes int64) {\n\t\t\t\t(*reporter)(incDownloadedBytes,
            download.File, download.destination, download.error)\n\t\t\t}\n\t\t\tparams.Writer
            = writer\n\t\t\t*queuedDownloads++\n\t\t\tgo func() {\n\t\t\t\tgoc.Wait()\n\t\t\t\twriter.ProgressWatcher(0)\n\n\t\t\t\tfile,
            err := c.Download(params)\n\t\t\t\tcompletedDownload := fileDownload{File: file,
            error: err}\n\t\t\t\t*fileChannel <- completedDownload\n\t\t\t\tgoc.Done()\n\t\t\t}()\n\t\tdefault:\n\t\t\tif
            it.Err() != nil {\n\t\t\t\tdownload.error = it.Err()\n\t\t\t} else {\n\t\t\t\tdownload.error
            = fmt.Errorf(\"unknown file type %v\", entry.Type)\n\t\t\t}\n\t\t}\n\t}\n\n\tfor
            it.Next() {\n\t\tentry := it.Folder()\n\t\taction(entry)\n\t}\n\treturn nil\n}\n\ntype
            Entity struct {\n\tfile files_sdk.Folder\n\terror\n}\n\nfunc (c *Client) index(params
            files_sdk.FolderListForParams) []Entity {\n\tvar files []Entity\n\tfolderClient
            := folder.Client{Config: c.Config}\n\tit, err := folderClient.ListFor(params)\n\n\tif
            err != nil {\n\t\tfiles = append(files, Entity{file: files_sdk.Folder{Path:
            params.Path, Type: \"error\"}, error: err})\n\t}\n\n\tfor it.Next() {\n\t\tentry
            := it.Folder()\n\t\tswitch entry.Type {\n\t\tcase \"directory\":\n\t\t\tfiles
            = append(files, c.index(files_sdk.FolderListForParams{Path: entry.Path})...)\n\t\tcase
            \"file\":\n\t\t\tfiles = append(files, Entity{file: entry})\n\t\tdefault:\n\t\t\tfiles
            = append(files, Entity{file: entry, error: fmt.Errorf(\"unknown file type %v\",
            entry.Type)})\n\t\t}\n\t}\n\n\tif it.Err() != nil {\n\t\tfiles = append(files,
            Entity{file: files_sdk.Folder{Path: params.Path}, error: it.Err()})\n\t}\n\treturn
            files\n}\n"
          form: {}
          headers:
            Content-Length:
            - "6226"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/b22dbe84-ae01-4921-8d68-be593d7c8193?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162913Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=9gfRAIhiCIm6259ZuX1gFjGwPtFvQNPQGcOJ2UmJdjhYOBa32e1YxN48xTZSsCeZ1BnFvxQZYvlXtgivv24KeLbMc.JkKpiOSdTba8JqwfIHKcKiFSE81vQzjZVPKRJ7&X-Amz-Signature=5d43df5847b19973d162b0a634db025ec016716aebeb7c887b7a91941df17469
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Etag:
            - '"ba9bc285e8e0c74bffd2d1c5ccf22a7c"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - avB031i4mSuJ9WlWAWsDfCyNy2SDjgumtQvCegsxwbjYMQJ65PFO5b5Lk2eBbEgTzYap/GGo2js=
            X-Amz-Request-Id:
            - 0MTCSWERBHRC06EG
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package file\n\nimport (\n\t\"io\"\n\n\tfiles_sdk \"github.com/Files-com/files-sdk-go\"\n\tlib
            \"github.com/Files-com/files-sdk-go/lib\"\n)\n\ntype Client struct {\n\tfiles_sdk.Config\n}\n\nfunc
            (c *Client) Find(Path string) (files_sdk.File, error) {\n\tfile := files_sdk.File{}\n\tpath
            := lib.BuildPath(\"/files/\", Path)\n\texportParams, err := lib.ExportParams(lib.Interface())\n\tif
            err != nil {\n\t\treturn file, err\n\t}\n\tdata, _, err := files_sdk.Call(\"GET\",
            c.Config, path, exportParams)\n\tif err != nil {\n\t\treturn file, err\n\t}\n\tif
            err := file.UnmarshalJSON(*data); err != nil {\n\t\treturn file, err\n\t}\n\n\treturn
            file, nil\n}\n\nfunc Find(Path string) (files_sdk.File, error) {\n\tclient :=
            Client{}\n\treturn client.Find(Path)\n}\n\nfunc (c *Client) Download(params
            files_sdk.FileDownloadParams) (files_sdk.File, error) {\n\tfile := files_sdk.File{}\n\tpath
            := lib.BuildPath(\"/files/\", params.Path)\n\texportParams, err := lib.ExportParams(params)\n\tif
            err != nil {\n\t\treturn file, err\n\t}\n\tdata, _, err := files_sdk.Call(\"GET\",
            c.Config, path, exportParams)\n\tif err != nil {\n\t\treturn file, err\n\t}\n\tif
            err := file.UnmarshalJSON(*data); err != nil {\n\t\treturn file, err\n\t}\n\n\tresp,
            err := c.Config.GetHttpClient().Get(file.DownloadUri)\n\tif err != nil {\n\t\treturn
            file, err\n\t}\n\tif params.OnDownload != nil {\n\t\tparams.OnDownload(resp)\n\t}\n\t_,
            err = io.Copy(params.Writer, resp.Body)\n\tif err != nil {\n\t\treturn file,
            err\n\t}\n\n\treturn file, nil\n}\n\nfunc Download(params files_sdk.FileDownloadParams)
            (files_sdk.File, error) {\n\tclient := Client{}\n\treturn client.Download(params)\n}\n\nfunc
            (c *Client) Create(params files_sdk.FileCreateParams) (files_sdk.File, error)
            {\n\tfile := files_sdk.File{}\n\tpath := lib.BuildPath(\"/files/\", params.Path)\n\texportedParams,
            err := lib.ExportParams(params)\n\tif err != nil {\n\t\treturn file, err\n\t}\n\tdata,
            res, err := files_sdk.Call(\"POST\", c.Config, path, exportedParams)\n\tif err
            != nil {\n\t\treturn file, err\n\t}\n\tif res.StatusCode == 204 {\n\t\treturn
            file, nil\n\t}\n\tif err := file.UnmarshalJSON(*data); err != nil {\n\t\treturn
            file, err\n\t}\n\n\treturn file, nil\n}\n\nfunc Create(params files_sdk.FileCreateParams)
            (files_sdk.File, error) {\n\treturn (&Client{}).Create(params)\n}\n\nfunc (c
            *Client) Update(params files_sdk.FileUpdateParams) (files_sdk.File, error) {\n\tfile
            := files_sdk.File{}\n\tpath := lib.BuildPath(\"/files/\", params.Path)\n\texportedParams,
            err := lib.ExportParams(params)\n\tif err != nil {\n\t\treturn file, err\n\t}\n\tdata,
            res, err := files_sdk.Call(\"PATCH\", c.Config, path, exportedParams)\n\tif
            err != nil {\n\t\treturn file, err\n\t}\n\tif res.StatusCode == 204 {\n\t\treturn
            file, nil\n\t}\n\tif err := file.UnmarshalJSON(*data); err != nil {\n\t\treturn
            file, err\n\t}\n\n\treturn file, nil\n}\n\nfunc Update(params files_sdk.FileUpdateParams)
            (files_sdk.File, error) {\n\treturn (&Client{}).Update(params)\n}\n\nfunc (c
            *Client) Delete(params files_sdk.FileDeleteParams) (files_sdk.File, error) {\n\tfile
            := files_sdk.File{}\n\tpath := lib.BuildPath(\"/files/\", params.Path)\n\texportedParams,
            err := lib.ExportParams(params)\n\tif err != nil {\n\t\treturn file, err\n\t}\n\tdata,
            res, err := files_sdk.Call(\"DELETE\", c.Config, path, exportedParams)\n\tif
            err != nil {\n\t\treturn file, err\n\t}\n\tif res.StatusCode == 204 {\n\t\treturn
            file, nil\n\t}\n\tif err := file.UnmarshalJSON(*data); err != nil {\n\t\treturn
            file, err\n\t}\n\n\treturn file, nil\n}\n\nfunc Delete(params files_sdk.FileDeleteParams)
            (files_sdk.File, error) {\n\treturn (&Client{}).Delete(params)\n}\n"
          form: {}
          headers:
            Content-Length:
            - "3364"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/4076b7d3-6fbc-494a-b965-06578ea5ce37?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162913Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=6TMux1GyunZ6blVAJv2i7LF8h_cqwnoFeXwLE81XDEVurgXXXG6Nb3Oi7C888DBUgn78wEvjlrAsIAqJ66M3BVrFxUnXCHf2uhg54mesfIHRgPfAD43IpEWguiPkiE.k&X-Amz-Signature=03edabd515a3780705fadcd42659ff28a5266c763d6981cc2c90d9618aff67c9
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Etag:
            - '"392625ec1f05d9a244f6373e40e3437d"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - e62n9A4EiuzxJckVQZpT1aHMdrLYpq0jOOY1h2Yy8xmgtqOSugru/AucXiYcc0ib7zIJDIV94SA=
            X-Amz-Request-Id:
            - 0MT3TAR64N7R2Y7A
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: |
            ---
            version: 1
            interactions:
            - request:
                body: '{}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/folders/golib
                method: POST
              response:
                body: '{"display_name":"golib","type":"directory","size":null,"crc32":null,"md5":null,"subfolders_locked?":false}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "106"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:10 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 997fd1fd-33f3-4605-ac86-668f7fe8d8ac
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/bool.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860492","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/6293b411-2a63-4544-90df-c3f0ee9adbf6?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=.L1EDAM9eArHJ6mNuVgBYH78JgEez7Uu99z2IT4Z0eaovR6Qrwj06G0xUqtEjkgQA2NEtY8_nsUyy7QnE1IWbm5SLYq5asA_nFw6cgEmY8Zfity1PSC0f1DEacICmtyh\u0026X-Amz-Signature=04f1a6ffdcd9e4029f7c5fbd6b832f75b02054288d37c1c214924c2f5a644282"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 8c1e5b0d-3e0d-4b17-b8c6-66f7940dfc4e
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/progresswriter.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860488","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/0c612446-3139-4287-aa05-717759a77e76?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=RMoWZyY30fPBeUXwp6G3EaysiNgnp1nZOdknirQB0o9YPI5x3wTn8QmeGTjn.8G8Hg9L9A3fm5D9OWEDfu86mjiE.0IXG.5_ouwxxCnh3P_Xz3rEAdkaGHztL_DEF0dL\u0026X-Amz-Signature=d6c1b4024ba3134aaa1b9242af2734d874d1bb29276a2c7e88c776e42a5944c4"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 9b5a394c-0c4b-4163-b959-e9a9f3134d3d
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/required_test.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860489","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/f2345b32-1ec7-42f6-acf0-f5f09b22f26f?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=smiiOdOEW0ROqsNgD8ShizuI5mcguE0xNRi7NQ2VRkAbkAqARurcqEMAizX.vVXKvHRDUU6Vgvh7w.BRUahk4le76hSN9JG8U0hd7Qe77Sd74QZY527RzCJ7ofHHwSs9\u0026X-Amz-Signature=10dc0cb115841f17cd942cc05e4da05944dd25a9a2f4454aad45f41c7061c2cc"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 2c0f837d-d007-4830-9118-cbead33bb19f
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/export_params.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860491","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/28c3a473-601c-47af-ab43-c8d877983ae3?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=Pzo1jOcuxeFgVFPbqldqOA0faawHjtNAxWsfJr83khKP5YasNUnf2aw4qHVNLI.P8lEUh4XY_rpMcRUzC6N_V7_7Ia1UJHi2VA02ZOE.sJWhnvrJQN1E.KgTtkDAYmIe\u0026X-Amz-Signature=9e9e87e67573ef8c7e9945739475ae0f87128beba56dd005e007aed7e771e393"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - ba162c4b-8741-478a-8dab-67e9993d5820
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/string.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860495","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/eaf3f8d4-8d27-4c78-9375-3a40e1b54d80?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=pAbvwD56SqQBhL8V30E_n2wYgszIuLOnckJQorLTXwp_mIgdCkcmLWEYpG6M_MK_YuHR3pr0cBpe_JFJSaruvRSU0SJH_OodUj0BlIGxP8pLeSs3RvaJe87RPZaLhTe4\u0026X-Amz-Signature=051d88474e661113b77a14f90bbaf965d42a6d86e8b17a542f5b4189716dab71"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 0b05445d-859a-45b1-9bfa-d2cf3ef2cae3
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/iter_test.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860499","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/2abf3173-e649-45f3-8491-0e8bcb1edf2c?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=lt33t4Q4_.VmZodZwmoC2p.2sCtG3JFbwgIETSvV12FNs.qZVOV2tVwHIIuJm7FYsKlMRcnIp4rcnuar4FAyrINBjblltm324c12k.VUNkEpSiVL1zvxJNeMkuxfZ9ak\u0026X-Amz-Signature=f36eb1b5dc2bd35184e215664397aabf2354feb9fe5604d23b66904f2c21e651"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 5c017f1d-80ce-4d74-8bb5-3d13daa996e5
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/interface.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860494","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/da25acf3-4ee0-4267-8e6f-eb40629f6f26?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=QZKcyh1WwG5mTXYn30CMaNN1WUQATl.3v0KbU2ZCyGH9gOxGNMudU0qOskXN2F_4SUiw4GwyCaSHbwn3slNhMIVJJLtr8W90IY_anTDCjFvDcj80mKVBwFjHhvhm5Bjv\u0026X-Amz-Signature=fbec6796ea00174fc08d6db1dd0b51386529f7e3b549935769f4abc6fceaea20"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - a79cf4dc-ae0e-45cd-8a18-7b7c8147ec46
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/iter.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860490","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/d078fafa-a024-4750-a9c6-a94f94400688?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=8BE0vKnxcFOqNSm1jAmoJKorsOcgXyPzqHUHV2lHkWfCk4rs0eZM_yCV8P3XyU47CDaTnjcMEaJj8mIYxEq4_S2minYCJ0l1cJ8lWlWHAScnE6tY4kieZmjFD2spzGsZ\u0026X-Amz-Signature=2f6212653c6aec0e06406dfe35cff7d9fda97fab1efce49ea92a4828121dd5ea"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - d3dade22-80bc-4d91-baaf-70c9fbaf61ac
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/required.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860498","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/f1357373-6cc0-4958-b69f-d6206f68531d?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=NyqdEvIKAStAk5SG2MZrDA8sSiLOUOXfyKnl.nQgSIJq3WZDQVxGa4MpTzrlOpY7jaAmKJm_J9jJlqKV.D.mgBzE1Cfvo2R25RQTAaVU5n9wO.JlZprqHnDUcap2dTib\u0026X-Amz-Signature=72b97558a60a8ef456e2155ad0c5d93e6f51f953ea25d84861064b7a5e3f2aab"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 2e76056c-213c-405e-882e-2be816dfcb3f
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"mkdir_parents":"true"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/file_actions/begin_upload/golib/query.go
                method: POST
              response:
                body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-04-14T16:44:11Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-4169860501","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/9a9b6e6e-13e7-4a80-9463-8e85a4e0c172?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T162911Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=lS3nvnnFZ6wMMxYLl4VfQ8Z8NokvWMhxoUctXVVIBshSU2UNGmIxgFWTX45IHkkf9LVvHFyJkrFmvqVwLynoBmwPygfzypdt9VvJcPPa9STbWiBtGqvyPaBn1zIk0APZ\u0026X-Amz-Signature=a0ba4180f961b8b910b744bf6c866b447d5e075514f564199ddd377fc4b22891"}]'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - a223a8f7-ad7b-4d4a-aab9-8e283c7acc3e
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nfunc String(string string) *string {\n\treturn &string\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "68"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/eaf3f8d4-8d27-4c78-9375-3a40e1b54d80?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=pAbvwD56SqQBhL8V30E_n2wYgszIuLOnckJQorLTXwp_mIgdCkcmLWEYpG6M_MK_YuHR3pr0cBpe_JFJSaruvRSU0SJH_OodUj0BlIGxP8pLeSs3RvaJe87RPZaLhTe4&X-Amz-Signature=051d88474e661113b77a14f90bbaf965d42a6d86e8b17a542f5b4189716dab71
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"cecd1ea94155ea41d1f8f9e0c2f2e0d9"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - T9BfOxHECUMiIftibJ7srY03HerNKIJe4yzczBElt6dAx99r6Neb8BVRa0fEN9rGjTxEAiQQbc0=
                  X-Amz-Request-Id:
                  - X92TXK3G21BZ4JWW
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nfunc Bool(bool bool) *bool {\n\treturn &bool\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "58"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/6293b411-2a63-4544-90df-c3f0ee9adbf6?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=.L1EDAM9eArHJ6mNuVgBYH78JgEez7Uu99z2IT4Z0eaovR6Qrwj06G0xUqtEjkgQA2NEtY8_nsUyy7QnE1IWbm5SLYq5asA_nFw6cgEmY8Zfity1PSC0f1DEacICmtyh&X-Amz-Signature=04f1a6ffdcd9e4029f7c5fbd6b832f75b02054288d37c1c214924c2f5a644282
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"83789abda0845357c13aa5fa9c8605a2"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - k8Poy25nqnI1RwdkDJKp7FBS9He3eqLqXWYaQIojvtqwC1BYx+vaYghI/6KRsY90Rwme+7zzSfw=
                  X-Amz-Request-Id:
                  - X92H51N5T1VC76WG
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nimport (\n\t\"net/url\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nvar
                  QueryEscape = url.QueryEscape\n\nfunc PathEscape(path string) string {\n\tpathParts
                  := strings.Split(path, \"/\")\n\tnewParts := make([]string, len(pathParts))\n\n\tfor
                  i, part := range pathParts {\n\t\tnewParts[i] = url.PathEscape(part)\n\t}\n\n\treturn
                  strings.Join(newParts, \"/\")\n}\n\nfunc BuildPath(resourcePath string, unescapedPath
                  string) string {\n\tviaOS := filepath.Join(resourcePath, PathEscape(unescapedPath))\n\treturn
                  strings.Join(strings.Split(viaOS, string(os.PathSeparator)), \"/\")\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "549"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/9a9b6e6e-13e7-4a80-9463-8e85a4e0c172?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=lS3nvnnFZ6wMMxYLl4VfQ8Z8NokvWMhxoUctXVVIBshSU2UNGmIxgFWTX45IHkkf9LVvHFyJkrFmvqVwLynoBmwPygfzypdt9VvJcPPa9STbWiBtGqvyPaBn1zIk0APZ&X-Amz-Signature=a0ba4180f961b8b910b744bf6c866b447d5e075514f564199ddd377fc4b22891
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"896d351744edbb4420bd736284a1a288"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - l8GW5tn3ZAPfTaL9RcryFU/qiB6qtZh7MJSXjLeQkqiMkYDnxp1smArX33i7f+FpuB+lcTHJK2U=
                  X-Amz-Request-Id:
                  - X92M2HF57S6GEPN0
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nfunc Interface() interface{} {\n\tvar i interface{}\n\treturn
                  i\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "75"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/da25acf3-4ee0-4267-8e6f-eb40629f6f26?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=QZKcyh1WwG5mTXYn30CMaNN1WUQATl.3v0KbU2ZCyGH9gOxGNMudU0qOskXN2F_4SUiw4GwyCaSHbwn3slNhMIVJJLtr8W90IY_anTDCjFvDcj80mKVBwFjHhvhm5Bjv&X-Amz-Signature=fbec6796ea00174fc08d6db1dd0b51386529f7e3b549935769f4abc6fceaea20
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"f7cb73244af2aafb2ced638dc9658dee"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - dNsdD86LUgR22xbKveKRsc9Gsx5deW6vUBKtT33EBstrjWiMHKyTWLw78LPLXL7uRUGWkPFAI4M=
                  X-Amz-Request-Id:
                  - X92GT0NP01YMVGGJ
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nimport (\n\t\"net/url\"\n\n\t\"github.com/appscode/go-querystring/query\"\n)\n\nfunc
                  ExportParams(i interface{}) (url.Values, error) {\n\tv, err := query.Values(i)\n\tif
                  err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn v, CheckRequired(i, &v)\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "231"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/28c3a473-601c-47af-ab43-c8d877983ae3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=Pzo1jOcuxeFgVFPbqldqOA0faawHjtNAxWsfJr83khKP5YasNUnf2aw4qHVNLI.P8lEUh4XY_rpMcRUzC6N_V7_7Ia1UJHi2VA02ZOE.sJWhnvrJQN1E.KgTtkDAYmIe&X-Amz-Signature=9e9e87e67573ef8c7e9945739475ae0f87128beba56dd005e007aed7e771e393
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"3cc6728f7554f3ea0f53dabed57b19d2"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - clsDqDduS6pz+2FPdAvUQY3D2IWYFEnqLt0QgnRzbRe7bet6IGL1X27QXCloLBbAK8lHkitac2k=
                  X-Amz-Request-Id:
                  - X92H47NDETRYPZFT
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"reflect\"\n\t\"strings\"\n)\n\nfunc
                  CheckRequired(iStruct interface{}, values *url.Values) error {\n\tvar errors
                  = make([]string, 0)\n\tval := reflect.ValueOf(iStruct)\n\tfor val.Kind() ==
                  reflect.Ptr {\n\t\tif val.IsNil() {\n\t\t\treturn nil\n\t\t}\n\t\tval = val.Elem()\n\t}\n\n\tif
                  iStruct == nil {\n\t\treturn nil\n\t}\n\n\tif val.Kind() != reflect.Struct {\n\t\treturn
                  fmt.Errorf(\"CheckRequired expects struct input. Got %v\", val.Kind())\n\t}\n\n\ttyp
                  := val.Type()\n\tfor i := 0; i < typ.NumField(); i++ {\n\t\tsf := typ.Field(i)\n\t\tif
                  sf.PkgPath != \"\" && !sf.Anonymous { // unexported\n\t\t\tcontinue\n\t\t}\n\t\ttag
                  := sf.Tag.Get(\"required\")\n\t\turlTag := sf.Tag.Get(\"url\")\n\t\tkey := strings.Split(urlTag,
                  \",\")[0]\n\n\t\tif tag == \"true\" && values.Get(key) == \"\" {\n\t\t\terrors
                  = append(\n\t\t\t\terrors,\n\t\t\t\tCreateError(iStruct, sf.Name).Error(),\n\t\t\t)\n\t\t}\n\t}\n\tif
                  len(errors) != 0 {\n\t\treturn fmt.Errorf(strings.Join(errors, \"\\n\"))\n\t}\n\treturn
                  nil\n}\n\nfunc CreateError(i interface{}, name string) error {\n\tstructName
                  := reflect.TypeOf(i).Name()\n\treturn fmt.Errorf(\"missing required field: %v{}.%v\",
                  structName, name)\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "1087"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/f1357373-6cc0-4958-b69f-d6206f68531d?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=NyqdEvIKAStAk5SG2MZrDA8sSiLOUOXfyKnl.nQgSIJq3WZDQVxGa4MpTzrlOpY7jaAmKJm_J9jJlqKV.D.mgBzE1Cfvo2R25RQTAaVU5n9wO.JlZprqHnDUcap2dTib&X-Amz-Signature=72b97558a60a8ef456e2155ad0c5d93e6f51f953ea25d84861064b7a5e3f2aab
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"72556a26959c471a4b0bff38d08e558b"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - UqY4y8qSAdCjgHhrxCnu72V7yYcd0Gr9Yau27nfMFpn0yCGfUTQRaLo1xSAS1Bvt8dckjOhGpJc=
                  X-Amz-Request-Id:
                  - X92VGDP72N6BE8AW
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nimport \"io\"\n\ntype ProgressWriter struct {\n\tWriter
                  \         io.Writer\n\tProgressWatcher func(int64)\n}\n\nfunc (w ProgressWriter)
                  Write(p []byte) (n int, err error) {\n\tn, err = w.Writer.Write(p)\n\n\tw.ProgressWatcher(int64(n))\n\treturn
                  n, err\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "250"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/0c612446-3139-4287-aa05-717759a77e76?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=RMoWZyY30fPBeUXwp6G3EaysiNgnp1nZOdknirQB0o9YPI5x3wTn8QmeGTjn.8G8Hg9L9A3fm5D9OWEDfu86mjiE.0IXG.5_ouwxxCnh3P_Xz3rEAdkaGHztL_DEF0dL&X-Amz-Signature=d6c1b4024ba3134aaa1b9242af2734d874d1bb29276a2c7e88c776e42a5944c4
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"a818d0badee418a848d9dc03b985b244"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - qB42dOwe9xl0z4TWRB8vWdTPJzfeUHKXyAjSQzhRtloZipoSeAS/pnFoPQahJcEXs83B7DLs1YE=
                  X-Amz-Request-Id:
                  - X92ZK2Y5XGBNQXMK
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nimport (\n\t\"testing\"\n\n\t\"github.com/appscode/go-querystring/query\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\ntype
                  A struct {\n\tName   string `url:\"name\" required:\"true\"`\n\tAge    int    `url:\"age\"
                  required:\"false\"`\n\tIgnore int    `url:\"-\" required:\"false\"`\n}\n\nfunc
                  TestCheckRequired_Valid(t *testing.T) {\n\tassert := assert.New(t)\n\ta := A{Name:
                  \"Dustin\", Age: 90, Ignore: 50}\n\tvalues, _ := query.Values(a)\n\n\terr :=
                  CheckRequired(a, &values)\n\tassert.Equal(err, nil)\n}\n\nfunc TestCheckRequired_Invalid(t
                  *testing.T) {\n\tassert := assert.New(t)\n\ta := A{Age: 90}\n\tvalues, _ :=
                  query.Values(a)\n\n\terr := CheckRequired(a, &values)\n\tassert.EqualError(err,
                  \"missing required field: A{}.Name\")\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "691"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/f2345b32-1ec7-42f6-acf0-f5f09b22f26f?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=smiiOdOEW0ROqsNgD8ShizuI5mcguE0xNRi7NQ2VRkAbkAqARurcqEMAizX.vVXKvHRDUU6Vgvh7w.BRUahk4le76hSN9JG8U0hd7Qe77Sd74QZY527RzCJ7ofHHwSs9&X-Amz-Signature=10dc0cb115841f17cd942cc05e4da05944dd25a9a2f4454aad45f41c7061c2cc
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"129a7a11d2f07ee5446398ff07588c99"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - wrkVay0PAFxirOQghmMvFyIuvHsPulzg69FZE1ZaIz49ETmPvxl49CHq9ByEJQKX+OMbkXA0gu8=
                  X-Amz-Request-Id:
                  - X92WJ1BQP201KGFR
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc
                  TestIter_Next_MaxPages(t *testing.T) {\n\tassert := assert.New(t)\n\tparams
                  := ListParams{}\n\tparams.Set(0, 5, \"\", 2)\n\tit := Iter{}\n\tit.ListParams
                  = &params\n\n\tit.Query = func() (*[]interface{}, string, error) {\n\t\tret
                  := make([]interface{}, params.PerPage)\n\n\t\treturn &ret, \"cursor\", nil\n\t}\n\trecordCount
                  := 0\n\tfor it.Next() {\n\t\trecordCount += 1\n\t}\n\tassert.Equal(int(params.PerPage*params.MaxPages),
                  recordCount)\n\tassert.Equal(nil, it.Err())\n\tassert.Equal(\"cursor\", it.GetCursor())\n}\n\nfunc
                  TestIter_Next_ZeroMaxPages(t *testing.T) {\n\tassert := assert.New(t)\n\tparams
                  := ListParams{}\n\tparams.Set(0, 2, \"\", 0)\n\tpages := make([][]interface{},
                  0)\n\tpages = append(pages, make([]interface{}, params.PerPage))\n\tpages =
                  append(pages, make([]interface{}, params.PerPage))\n\tpages = append(pages,
                  make([]interface{}, 0))\n\tit := Iter{}\n\tit.ListParams = &params\n\n\tit.Query
                  = func() (*[]interface{}, string, error) {\n\t\tret := pages[:1][0]\n\t\tpages
                  = pages[1:]\n\n\t\treturn &ret, \"cursor\", nil\n\t}\n\trecordCount := 0\n\tfor
                  it.Next() {\n\t\trecordCount += 1\n\t}\n\tassert.Equal(4, recordCount)\n}\n\nfunc
                  TestIter_Next_PerPage_of_one(t *testing.T) {\n\tassert := assert.New(t)\n\tparams
                  := ListParams{}\n\tparams.Set(0, 1, \"\", 2)\n\tit := Iter{}\n\tit.ListParams
                  = &params\n\tvar sliceOfSliceInterfaces [2][]interface{}\n\tsliceOfSliceInterfaces[0]
                  = make([]interface{}, params.PerPage)\n\tsliceOfSliceInterfaces[1] = make([]interface{},
                  0)\n\tresultCounter := 0\n\tit.Query = func() (*[]interface{}, string, error)
                  {\n\t\tret := sliceOfSliceInterfaces[resultCounter]\n\t\tresultCounter += 1\n\t\treturn
                  &ret, \"cursor\", nil\n\t}\n\trecordCount := 0\n\tfor it.Next() {\n\t\trecordCount
                  += 1\n\t\tassert.Equal(Interface(), it.Current())\n\t}\n\tassert.Equal(1, recordCount)\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "1768"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/2abf3173-e649-45f3-8491-0e8bcb1edf2c?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=lt33t4Q4_.VmZodZwmoC2p.2sCtG3JFbwgIETSvV12FNs.qZVOV2tVwHIIuJm7FYsKlMRcnIp4rcnuar4FAyrINBjblltm324c12k.VUNkEpSiVL1zvxJNeMkuxfZ9ak&X-Amz-Signature=f36eb1b5dc2bd35184e215664397aabf2354feb9fe5604d23b66904f2c21e651
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"4a67a49b0a254d1698fb963d7011aebd"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - LZbD9+9cgT0H67KzwRwEC2JNHPw0KSPFEB5ekVC1C5OiNa9G1AigKIJmdDwSpUPvB4sUel/wgI4=
                  X-Amz-Request-Id:
                  - X92WPZXE27QCNSJM
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: "package lib\n\nimport (\n\t\"net/url\"\n)\n\ntype ListParams struct {\n\tPage
                  \    int64  `json:\"page,omitempty\" url:\"page,omitempty\" required:\"false\"`\n\tPerPage
                  \ int64  `json:\"per_page,omitempty\" url:\"per_page,omitempty\" required:\"false\"`\n\tCursor
                  \  string `json:\"cursor,omitempty\" url:\"cursor,omitempty\" required:\"false\"`\n\tMaxPages
                  int64  `json:\"-\" url:\"-\"`\n}\n\n// ListParamsContainer is a general interface
                  for which all list parameter\n// structs should comply. They achieve this by
                  embedding a ListParams struct\n// and inheriting its implementation of this
                  interface.\ntype ListParamsContainer interface {\n\tGetListParams() *ListParams\n}\n\n//
                  GetListParams returns a ListParams struct (itself). It exists because any\n//
                  structs that embed ListParams will inherit it, and thus implement the\n// ListParamsContainer
                  interface.\nfunc (p *ListParams) GetListParams() *ListParams {\n\treturn p\n}\n\nfunc
                  (p *ListParams) Set(page int64, perPage int64, cursor string, maxPages int64)
                  {\n\tp.Page = page\n\tp.PerPage = perPage\n\tp.Cursor = cursor\n\tp.MaxPages
                  = maxPages\n}\n\ntype Query func() (*[]interface{}, string, error)\n\ntype Iter
                  struct {\n\tQuery\n\tListParams   ListParamsContainer\n\tParams       []interface{}\n\tCurrentIndex
                  int\n\tValues       *[]interface{}\n\tCursor       string\n\tError        error\n}\n\n//
                  Err returns the error, if any,\n// that caused the Iter to stop.\n// It must
                  be inspected\n// after Next returns false.\nfunc (i *Iter) Err() error {\n\treturn
                  i.Error\n}\n\nfunc (i *Iter) Current() interface{} {\n\treturn (*i.Values)[i.CurrentIndex]\n}\n\nfunc
                  (i *Iter) GetParams() *ListParams {\n\treturn i.ListParams.GetListParams()\n}\n\nfunc
                  (i *Iter) ExportParams() (url.Values, error) {\n\tparamValues, err := ExportParams(i.GetParams())\n\tif
                  err != nil {\n\t\treturn paramValues, err\n\t}\n\tlistParamValues, _ := ExportParams(i.ListParams)\n\n\tfor
                  key, value := range paramValues {\n\t\tlistParamValues.Set(key, value[0])\n\t}\n\n\tif
                  i.GetCursor() != \"\" {\n\t\tlistParamValues.Del(\"page\")\n\t}\n\n\treturn
                  listParamValues, nil\n}\n\nfunc (i *Iter) GetPage() bool {\n\tif i.GetParams().MaxPages
                  != 0 && i.GetParams().Page == i.GetParams().MaxPages {\n\t\treturn false\n\t}\n\n\ti.GetParams().Page
                  += 1\n\ti.Values, i.Cursor, i.Error = i.Query()\n\ti.SetCursor(i.Cursor)\n\treturn
                  i.Error == nil && len(*i.Values) != 0\n}\n\nfunc (i *Iter) EOFPage() bool {\n\treturn
                  len(*i.Values) == i.CurrentIndex+1\n}\n\nfunc (i *Iter) GetCursor() string {\n\treturn
                  i.GetParams().Cursor\n}\n\nfunc (i *Iter) SetCursor(cursor string) {\n\ti.GetParams().Cursor
                  = cursor\n\ti.Cursor = cursor\n}\n\n// Next iterates the results in i.Current()
                  or i.`ResourceName`().\n// It returns true until there are no results remaining.\n//
                  To adjust the number of results set ListParams.PerPage.\n// To have it auto-paginate
                  set ListParams.MaxPages, default is 1.\n//\n// To iterate over all results use
                  the following pattern.\n//\n//   for i.Next() {\n//     i.Current()\n//   }\nfunc
                  (i *Iter) Next() bool {\n\tif i.Values == nil {\n\t\treturn i.GetPage() && len(*i.Values)
                  > 0\n\t} else if len(*i.Values) > i.CurrentIndex+1 {\n\t\ti.CurrentIndex +=
                  1\n\t\treturn true\n\t}\n\n\tif len(*i.Values) == int(i.GetParams().PerPage)
                  {\n\t\ti.CurrentIndex = 0\n\t\treturn i.GetPage()\n\t}\n\n\treturn false\n}\n"
                form: {}
                headers:
                  Content-Length:
                  - "3133"
                url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/d078fafa-a024-4750-a9c6-a94f94400688?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162911Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=8BE0vKnxcFOqNSm1jAmoJKorsOcgXyPzqHUHV2lHkWfCk4rs0eZM_yCV8P3XyU47CDaTnjcMEaJj8mIYxEq4_S2minYCJ0l1cJ8lWlWHAScnE6tY4kieZmjFD2spzGsZ&X-Amz-Signature=2f6212653c6aec0e06406dfe35cff7d9fda97fab1efce49ea92a4828121dd5ea
                method: PUT
              response:
                body: ""
                headers:
                  Content-Length:
                  - "0"
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Etag:
                  - '"e9ea3460b609e2e5cc8e297aee42f49d"'
                  Server:
                  - AmazonS3
                  X-Amz-Id-2:
                  - Cky5oXOsFMi1b5Rxnmzybt0Gom/Cl15w9kH7DbX6G8DhcRfzon2NQQ9wX2Q9s1t4dIeYSpt3S+Y=
                  X-Amz-Request-Id:
                  - X92JNA9RSDPVDX52
                  X-Amz-Server-Side-Encryption:
                  - AES256
                status: 200 OK
                code: 200
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"3cc6728f7554f3ea0f53dabed57b19d2\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860491","size":"231"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/export_params.go
                method: POST
              response:
                body: '{"path":"golib/export_params.go","display_name":"export_params.go","type":"file","size":231,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "267"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 3872c9c0-81ca-453b-a096-250f3d686993
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"129a7a11d2f07ee5446398ff07588c99\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860489","size":"691"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/required_test.go
                method: POST
              response:
                body: '{"path":"golib/required_test.go","display_name":"required_test.go","type":"file","size":691,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "267"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 141e6386-f32a-4d5d-a15e-576b14e9e9e0
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"f7cb73244af2aafb2ced638dc9658dee\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860494","size":"75"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/interface.go
                method: POST
              response:
                body: '{"path":"golib/interface.go","display_name":"interface.go","type":"file","size":75,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "258"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 362eb161-25d5-4388-b15b-2192f65659c2
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"cecd1ea94155ea41d1f8f9e0c2f2e0d9\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860495","size":"68"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/string.go
                method: POST
              response:
                body: '{"path":"golib/string.go","display_name":"string.go","type":"file","size":68,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "252"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - b552c6f8-95ba-4c43-8362-029aa5d4ff0b
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"a818d0badee418a848d9dc03b985b244\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860488","size":"250"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/progresswriter.go
                method: POST
              response:
                body: '{"path":"golib/progresswriter.go","display_name":"progresswriter.go","type":"file","size":250,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "269"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - a2a794f9-5827-47ea-b95e-cda8048b61c8
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"4a67a49b0a254d1698fb963d7011aebd\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860499","size":"1768"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/iter_test.go
                method: POST
              response:
                body: '{"path":"golib/iter_test.go","display_name":"iter_test.go","type":"file","size":1768,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "260"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - c398e17b-463f-4dd8-a54b-3f0c002748cd
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"e9ea3460b609e2e5cc8e297aee42f49d\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860490","size":"3133"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/iter.go
                method: POST
              response:
                body: '{"path":"golib/iter.go","display_name":"iter.go","type":"file","size":3133,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "250"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 374aad43-8227-4bb7-9ce6-ffad699edf55
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"72556a26959c471a4b0bff38d08e558b\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860498","size":"1087"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/required.go
                method: POST
              response:
                body: '{"path":"golib/required.go","display_name":"required.go","type":"file","size":1087,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "258"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - c89fc900-6e33-4dd4-bb2d-6665f643ebc8
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"896d351744edbb4420bd736284a1a288\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860501","size":"549"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/query.go
                method: POST
              response:
                body: '{"path":"golib/query.go","display_name":"query.go","type":"file","size":549,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "251"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 9e9dda68-af0d-4322-ae66-191e106c4a21
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: '{"action":"end","etags[0][etag]":"\"83789abda0845357c13aa5fa9c8605a2\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:11-07:00","ref":"put-4169860492","size":"58"}'
                form: {}
                headers:
                  Content-Type:
                  - application/json
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib/bool.go
                method: POST
              response:
                body: '{"path":"golib/bool.go","display_name":"bool.go","type":"file","size":58,"mtime":"2021-04-14T16:29:11Z","provided_mtime":"2021-04-14T16:29:11Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "248"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:11 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - df71e2c0-ba49-4b6b-bfac-bdb59371bf5d
                status: 201 Created
                code: 201
                duration: ""
            - request:
                body: ""
                form: {}
                headers:
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib
                method: DELETE
              response:
                body: '{"error":"Folder golib not empty","http-code":422,"instance":"4a5c05c6-0fe6-42c3-adc3-02e67f6a25d9","title":"Folder
                  Not Empty","type":"processing-failure/folder-not-empty"}'
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Content-Length:
                  - "172"
                  Content-Type:
                  - application/json
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 4a5c05c6-0fe6-42c3-adc3-02e67f6a25d9
                status: 422 Unprocessable Entity
                code: 422
                duration: ""
            - request:
                body: ""
                form: {}
                headers:
                  User-Agent:
                  - Files.com Go SDK
                url: https://app.files.com/api/rest/v1/files/golib?recursive=true
                method: DELETE
              response:
                body: ""
                headers:
                  Cache-Control:
                  - no-cache, no-store, max-age=0, must-revalidate
                  Date:
                  - Wed, 14 Apr 2021 16:29:12 GMT
                  Expires:
                  - Fri, 01 Jan 1990 00:00:00 GMT
                  Pragma:
                  - no-cache
                  Server:
                  - nginx
                  X-Request-Id:
                  - 408c414d-3c42-4c8c-8d03-ed9b462de42f
                status: 204 No Content
                code: 204
                duration: ""
          form: {}
          headers:
            Content-Length:
            - "50695"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/6f82ffb9-c06d-4851-a967-8acc2d98f334?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162913Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=SrBlGZ44t38kSaTqZT0FGfIZs91qhhnDheBQyC9tK4vAK6yLU.OEN1425BYddsHCAY1nncO3XkopKd61AV9ZN3_xvZm_KxPYOnxP7.NsMCZS08huDoPhiD8B68nD.vFC&X-Amz-Signature=c2a81cb1a5dba8cbedb9a52ba79a270c21eead00750ab5edff080f518c33587e
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Etag:
            - '"f58d6ccddc2d66a6914a02680ca7975d"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - qfbrwwdP8mfZzfJE3n6kEyUg6S+tS2RU2TLSV+Ar0Jg4URv7NvGLF5/rpDcSBKqyONBL9lmq88I=
            X-Amz-Request-Id:
            - 0MTC3Q70WXF6V5SC
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"ba9bc285e8e0c74bffd2d1c5ccf22a7c\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:13-07:00","ref":"put-4169860698","size":"6226"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/go-from-dot/download.go
          method: POST
        response:
          body: '{"path":"go-from-dot/download.go","display_name":"download.go","type":"file","size":6226,"mtime":"2021-04-14T16:29:13Z","provided_mtime":"2021-04-14T16:29:13Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "264"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:13 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - b0b2bf87-8a4c-448c-a1b4-e1afb6307060
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: "package file\n\nimport (\n\t\"io\"\n\t\"math\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\tfile_action
            \"github.com/Files-com/files-sdk-go/fileaction\"\n\n\t\"github.com/Files-com/files-sdk-go/lib\"\n\n\tfiles_sdk
            \"github.com/Files-com/files-sdk-go\"\n\tfolder \"github.com/Files-com/files-sdk-go/folder\"\n\t\"github.com/zenthangplus/goccm\"\n)\n\ntype
            fileUpload struct {\n\tLocalFile   *os.File\n\tDestination string\n\tSource
            \     string\n\tFile        files_sdk.File\n\tStat        os.FileInfo\n\terror\n}\n\ntype
            UploadParams struct {\n\tSource           string\n\tDestination      string\n\tProgressReporter
            func(source string, file files_sdk.File, progressByteCount int64, batchStats
            UploadBatchStats, err error)\n}\n\ntype UploadProgress struct {\n\tComplete
            \       bool\n\tprogressWatcher func(int64)\n}\n\nfunc (u *UploadProgress) AddUploadedBytes(bytes
            int64) {\n\tif u.progressWatcher != nil {\n\t\tu.progressWatcher(bytes)\n\t}\n}\n\ntype
            UploadBatchStats struct {\n\tLargestSize     int\n\tLargestFilePath int\n\tTotalUploads
            \   int\n\tSize            int64\n}\n\nfunc (c *Client) UploadFolderOrFile(params
            *UploadParams) ([]files_sdk.File, error) {\n\tabsoluteSource, err := filepath.Abs(params.Source)\n\tif
            err != nil {\n\t\treturn []files_sdk.File{}, err\n\t}\n\tfi, err := os.Stat(absoluteSource)\n\tif
            err != nil {\n\t\treturn []files_sdk.File{}, err\n\t}\n\n\tvar files []files_sdk.File\n\n\tif
            fi.IsDir() {\n\t\tfileUploads, err := c.UploadFolder(params)\n\t\tif err !=
            nil {\n\t\t\treturn files, err\n\t\t}\n\t\tfor _, file := range fileUploads
            {\n\t\t\tif file.error != nil {\n\t\t\t\treturn files, file.error\n\t\t\t}\n\t\t\tfiles
            = append(files, file.File)\n\t\t}\n\t} else {\n\t\tfile, err := c.UploadFile(params)\n\t\tif
            err != nil {\n\t\t\treturn files, err\n\t\t}\n\t\tfiles = append(files, file)\n\t}\n\n\treturn
            files, nil\n}\n\nfunc (c *Client) UploadFolder(params *UploadParams) ([]fileUpload,
            error) {\n\tvar uploadFiles []fileUpload\n\tvar largestSize int64\n\tvar largestFilePath
            int\n\tlocalFolderPath := params.Source\n\tdestinationRootPath := params.Destination\n\tdirectoriesToCreate
            := make(map[string]fileUpload)\n\tvar TotalSize int64\n\taddUploads := func(path
            string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn
            err\n\t\t}\n\n\t\tdir, filename := filepath.Split(path)\n\n\t\tif localFolderPath
            == dir {\n\t\t\treturn nil\n\t\t}\n\n\t\tif filename == \".DS_Store\" {\n\t\t\treturn
            nil\n\t\t}\n\n\t\tif info.Size() > largestSize {\n\t\t\tlargestSize = info.Size()\n\t\t}\n\n\t\tif
            len(path) > largestFilePath {\n\t\t\tlargestFilePath = len(path)\n\t\t}\n\n\t\tvar
            destination string\n\t\tvar baseDestination string\n\t\tif localFolderPath !=
            \".\" {\n\t\t\tbaseDestination = strings.TrimPrefix(path, localFolderPath)\n\t\t}
            else if path != \".\" {\n\t\t\tbaseDestination = path\n\t\t}\n\t\tbaseDestination
            = strings.TrimLeft(baseDestination, \"/\")\n\t\tbaseDestination = strings.TrimPrefix(baseDestination,
            \"/\")\n\t\tif destinationRootPath == \"\" {\n\t\t\tdestination = baseDestination\n\t\t}
            else {\n\t\t\tdestination = filepath.Join(destinationRootPath, baseDestination)\n\t\t}\n\n\t\tif
            destination == \".\" {\n\t\t\tdestination = filename\n\t\t}\n\n\t\tfile := fileUpload{File:
            files_sdk.File{Path: destination, Size: info.Size()}, Source: path, Destination:
            destination}\n\t\tif file.isDir() {\n\t\t\tfile.File.Type = \"directory\"\n\t\t\tdirectoriesToCreate[destination]
            = file\n\t\t} else {\n\t\t\tTotalSize += info.Size()\n\t\t\tfile.File.Type =
            \"file\"\n\t\t\tuploadFiles = append(uploadFiles, file)\n\t\t}\n\t\treturn nil\n\t}\n\terr
            := filepath.Walk(localFolderPath, addUploads)\n\n\tif err != nil {\n\t\treturn
            uploadFiles, err\n\t}\n\n\tif len(uploadFiles) == 0 {\n\t\tfile := fileUpload{Source:
            localFolderPath}\n\t\tif !file.isDir() {\n\t\t\tif addUploads(localFolderPath,
            file.Stat, nil) != nil {\n\t\t\t\treturn uploadFiles, err\n\t\t\t}\n\t\t}\n\t}\n\n\tif
            destinationRootPath != \"\" {\n\t\tfolderClient := folder.Client{Config: c.Config}\n\t\t_,
            err := folderClient.Create(files_sdk.FolderCreateParams{Path: filepath.Clean(destinationRootPath)})\n\t\tif
            err != nil && (err).(files_sdk.ResponseError).ErrorMessage != \"The destination
            exists.\" {\n\t\t\treturn uploadFiles, err\n\t\t}\n\t}\n\n\tbatchStatus := UploadBatchStats{LargestSize:
            int(largestSize), LargestFilePath: largestFilePath, TotalUploads: len(uploadFiles),
            Size: TotalSize}\n\tsomeMapMutex := sync.RWMutex{}\n\tgoc := goccm.New(10)\n\tfor
            _, uploadFile := range uploadFiles {\n\t\tgo func(uploadFile fileUpload) {\n\t\t\tgoc.Wait()\n\t\t\tprogress
            := UploadProgress{}\n\t\t\tprogress.progressWatcher = func(bytesCount int64)
            {\n\t\t\t\tif params.ProgressReporter == nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tparams.ProgressReporter(uploadFile.Source,
            uploadFile.File, bytesCount, batchStatus, uploadFile.error)\n\t\t\t}\n\t\t\tdir,
            _ := filepath.Split(uploadFile.File.Path)\n\t\t\tsomeMapMutex.RLock()\n\t\t\tdirFile,
            ok := directoriesToCreate[filepath.Clean(dir)]\n\t\t\tsomeMapMutex.RUnlock()\n\t\t\tprogress.progressWatcher(0)\n\t\t\tif
            ok {\n\t\t\t\tmaybeCreateFolder(dirFile)\n\t\t\t\tif dirFile.error != nil {\n\t\t\t\t\tuploadFile.error
            = dirFile.error\n\t\t\t\t\tprogress.progressWatcher(0)\n\t\t\t\t}\n\t\t\t\tsomeMapMutex.Lock()\n\t\t\t\tdelete(directoriesToCreate,
            filepath.Clean(dir))\n\t\t\t\tsomeMapMutex.Unlock()\n\t\t\t}\n\t\t\tlocalFile,
            err := os.Open(uploadFile.Source)\n\t\t\tdefer func() {\n\t\t\t\tlocalFile.Close()\n\t\t\t\tgoc.Done()\n\t\t\t}()\n\t\t\tif
            err != nil {\n\t\t\t\tuploadFile.error = err\n\t\t\t\tprogress.progressWatcher(0)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfile,
            err := c.Upload(localFile, uploadFile.Stat.Size(), files_sdk.FileActionBeginUploadParams{Path:
            uploadFile.File.Path, MkdirParents: lib.Bool(true)}, &progress)\n\t\t\tif err
            != nil {\n\t\t\t\tuploadFile.error = err\n\t\t\t\tprogress.progressWatcher(0)\n\t\t\t}\n\t\t\tuploadFile.File
            = file\n\t\t}(uploadFile)\n\t}\n\tgoc.WaitAllDone()\n\n\treturn uploadFiles,
            err\n}\n\nfunc maybeCreateFolder(file fileUpload) {\n\tcreatedFolder, err :=
            folder.Create(files_sdk.FolderCreateParams{Path: file.Destination + \"/\"})\n\tresponseError,
            ok := (err).(files_sdk.ResponseError)\n\tif err != nil && ok && responseError.ErrorMessage
            != \"The destination exists.\" {\n\t\tfile.error = err\n\t} else {\n\t\tfile.File
            = createdFolder\n\t}\n}\n\nfunc (u *fileUpload) isDir() bool {\n\tfi, err :=
            os.Stat(u.Source)\n\tif err != nil {\n\t\tu.error = err\n\t\treturn false\n\t}\n\tu.Stat
            = fi\n\n\tif fi.IsDir() {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\nfunc
            (c *Client) UploadFile(params *UploadParams) (files_sdk.File, error) {\n\tbeginUpload
            := files_sdk.FileActionBeginUploadParams{}\n\tdestination := params.Destination\n\t_,
            localFileName := filepath.Split(params.Source)\n\tif params.Destination == \"\"
            {\n\t\tdestination = localFileName\n\t} else {\n\t\t_, err := c.Find(params.Destination)\n\t\tresponseError,
            ok := err.(files_sdk.ResponseError)\n\t\tif ok && responseError.Type == \"bad-request/cannot-download-directory\"
            {\n\t\t\tdestination = filepath.Join(params.Destination, localFileName)\n\t\t}
            else if ok && responseError.Type == \"not-found\" {\n\t\t\tif destination[len(destination)-1:]
            == \"/\" {\n\t\t\t\tdestination = filepath.Join(params.Destination, localFileName)\n\t\t\t\tbeginUpload.MkdirParents
            = lib.Bool(true)\n\t\t\t}\n\t\t} else if err != nil {\n\t\t\treturn files_sdk.File{},
            err\n\t\t}\n\t}\n\tfi, err := os.Stat(params.Source)\n\tlocalFile, err := os.Open(params.Source)\n\tif
            err != nil {\n\t\treturn files_sdk.File{}, err\n\t}\n\tdefer localFile.Close()\n\tprogress
            := UploadProgress{}\n\tprogress.progressWatcher = func(bytesCount int64) {\n\t\tif
            params.ProgressReporter == nil {\n\t\t\treturn\n\t\t}\n\t\tparams.ProgressReporter(\n\t\t\tparams.Source,\n\t\t\tfiles_sdk.File{Size:
            fi.Size(), Path: destination, Type: \"file\"},\n\t\t\tbytesCount,\n\t\t\tUploadBatchStats{Size:
            fi.Size(), LargestSize: int(fi.Size()), LargestFilePath: len(params.Destination),
            TotalUploads: 1},\n\t\t\tnil,\n\t\t)\n\t}\n\tbeginUpload.Path = destination\n\treturn
            c.Upload(localFile, fi.Size(), beginUpload, &progress)\n}\n\nfunc UploadFile(params
            *UploadParams) (files_sdk.File, error) {\n\treturn (&Client{}).UploadFile(params)\n}\n\nfunc
            (c *Client) Upload(source io.ReaderAt, size int64, beginUpload files_sdk.FileActionBeginUploadParams,
            progress *UploadProgress) (files_sdk.File, error) {\n\treturn c._upload(source,
            size, progress, beginUpload)\n}\n\ntype ProgressReader struct {\n\tio.ReadCloser\n\t*UploadProgress\n\tbytesRead
            int\n}\n\nfunc (p *ProgressReader) Read(b []byte) (n int, err error) {\n\tp.bytesRead,
            err = p.ReadCloser.Read(b)\n\tp.UploadProgress.AddUploadedBytes(int64(p.bytesRead))\n\treturn
            p.bytesRead, err\n}\n\nfunc (p *ProgressReader) Close() error {\n\treturn p.ReadCloser.Close()\n}\n\nfunc
            (c *Client) startUpload(beginUpload files_sdk.FileActionBeginUploadParams) (files_sdk.FileUploadPart,
            error) {\n\tfileActionClient := file_action.Client{Config: c.Config}\n\tuploads,
            err := fileActionClient.BeginUpload(beginUpload)\n\tif err != nil {\n\t\treturn
            files_sdk.FileUploadPart{}, err\n\t}\n\treturn uploads[0], err\n}\n\nfunc (c
            *Client) completeUpload(etags []files_sdk.EtagsParam, bytesWritten int64, path
            string, ref string) (files_sdk.File, error) {\n\treturn c.Create(files_sdk.FileCreateParams{\n\t\tProvidedMtime:
            time.Now(),\n\t\tEtagsParam:    etags,\n\t\tAction:        \"end\",\n\t\tPath:
            \         path,\n\t\tRef:           ref,\n\t\tSize:          bytesWritten,\n\t})\n}\n\nfunc
            byteOffset(size int64, blockSize int64, callback func(off int64, len int64))
            {\n\toff := int64(0)\n\tendRange := blockSize\n\tfor {\n\t\tif off < size {\n\t\t\tendRange
            = int64(math.Min(float64(endRange), float64(size)))\n\t\t\tcallback(off, endRange-off)\n\t\t\toff
            = endRange\n\t\t\tendRange = off + blockSize\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc
            (c *Client) _upload(reader io.ReaderAt, size int64, progress *UploadProgress,
            params files_sdk.FileActionBeginUploadParams) (files_sdk.File, error) {\n\tonComplete
            := make(chan files_sdk.EtagsParam)\n\tonError := make(chan error)\n\tbytesWritten
            := int64(0)\n\tetags := make([]files_sdk.EtagsParam, 0)\n\tgoc := c.Config.NullConcurrencyManger()\n\tfileUploadPart,
            err := c.startUpload(params)\n\tif err != nil {\n\t\treturn files_sdk.File{},
            err\n\t}\n\tif *fileUploadPart.ParallelParts {\n\t\tgoc = c.Config.ConcurrencyManger()\n\t}\n\tfileUploadPart.Path
            = params.Path\n\n\tbyteOffset(\n\t\tsize,\n\t\tfileUploadPart.Partsize,\n\t\tfunc(off
            int64, len int64) {\n\t\t\tgo func(off int64, len int64, fileUploadPart files_sdk.FileUploadPart)
            {\n\t\t\t\tgoc.Wait()\n\t\t\t\tetag, bytesRead, err := c.createPart(reader,
            off, len, fileUploadPart)\n\t\t\t\tif err != nil {\n\t\t\t\t\tonError <- err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbytesWritten
            += bytesRead\n\t\t\t\tprogress.AddUploadedBytes(bytesRead)\n\t\t\t\tonComplete
            <- etag\n\t\t\t\tgoc.Done()\n\t\t\t}(off, len, fileUploadPart)\n\n\t\t\tfileUploadPart.PartNumber
            += 1\n\t\t},\n\t)\n\n\tn := int64(0)\n\tfor n < fileUploadPart.PartNumber-1
            {\n\t\tn++\n\t\tselect {\n\t\tcase err := <-onError:\n\t\t\tgoc.Close()\n\t\t\treturn
            files_sdk.File{}, err\n\t\tcase etag := <-onComplete:\n\t\t\tetags = append(etags,
            etag)\n\t\t}\n\t}\n\n\treturn c.completeUpload(etags, bytesWritten, fileUploadPart.Path,
            fileUploadPart.Ref)\n}\n\nfunc Upload(reader io.ReaderAt, size int64, destination
            string, beginUpload files_sdk.FileActionBeginUploadParams, progress *UploadProgress)
            (files_sdk.File, error) {\n\treturn (&Client{}).Upload(reader, size, beginUpload,
            progress)\n}\n\nfunc (c *Client)createPart(reader io.ReaderAt, off int64, len
            int64, fileUploadPart files_sdk.FileUploadPart) (files_sdk.EtagsParam, int64,
            error){\n\tvar err error\n\tif fileUploadPart.PartNumber != 1 {\n\t\tfileUploadPart,
            err = c.startUpload(\n\t\t\tfiles_sdk.FileActionBeginUploadParams{Path: fileUploadPart.Path,
            Ref: fileUploadPart.Ref, Part: fileUploadPart.PartNumber},\n\t\t)\n\t\tif err
            != nil {\n\t\t\treturn files_sdk.EtagsParam{}, int64(0), err\n\t\t}\n\t}\n\n\tpartSizeBuffer
            := make([]byte, len)\n\tbytesRead, err := reader.ReadAt(partSizeBuffer, off)\n\tif
            err != nil {\n\t\treturn files_sdk.EtagsParam{}, int64(bytesRead), err\n\t}\n\n\theaders
            := http.Header{}\n\theaders.Add(\"Content-Length\", strconv.FormatInt(int64(bytesRead),
            10))\n\tres, err := files_sdk.CallRaw(\n\t\tfileUploadPart.HttpMethod,\n\t\tc.Config,\n\t\tfileUploadPart.UploadUri,\n\t\tnil,\n\t\t&partSizeBuffer,\n\t\t&headers,\n\t)\n\tdefer
            func() {\n\t\tif res != nil {\n\t\t\tres.Body.Close()\n\t\t}\n\t}()\n\tif err
            != nil {\n\t\treturn files_sdk.EtagsParam{}, int64(bytesRead), err\n\t}\n\n\treturn
            files_sdk.EtagsParam{\n\t\tEtag: res.Header.Get(\"Etag\"),\n\t\tPart: strconv.FormatInt(fileUploadPart.PartNumber,
            10),\n\t},  int64(bytesRead), nil\n}\n"
          form: {}
          headers:
            Content-Length:
            - "11788"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/6e3376c2-7225-4603-a3e7-123b80e22eb6?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162913Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=XMDosLt98fCm4MU7dFjxZB27AgDb7sCmF_s4NnNYaZx3eC6fjE2_LioRCl5vAfLb5vuooEt7maFLKG19XPvK9v7ZTZ3OETZLawNs_giSO_givyApqWPkboYlOUHSs1K2&X-Amz-Signature=e79f1f5b551b438b58ac74f19cdc725cf0f1afa2d5a4dcdf41b069fa30263ae9
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Etag:
            - '"3cae65af72976eb473c292e88171c1a8"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - FwcUHXZNlu6gv4bsY/n61ndFQzgMQoUdpG97loIkLZziEsbarati8EYg62il7R+pAYRaOZwuwyk=
            X-Amz-Request-Id:
            - 0MT9SBRW125EANT1
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: "package file\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\n\tfiles_sdk
            \"github.com/Files-com/files-sdk-go\"\n\t\"github.com/Files-com/files-sdk-go/folder\"\n\t\"github.com/Files-com/files-sdk-go/lib\"\n\t\"github.com/dnaeon/go-vcr/cassette\"\n\trecorder
            \"github.com/dnaeon/go-vcr/recorder\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc
            CreateClient(fixture string) (*Client, *recorder.Recorder, error) {\n\tclient
            := Client{}\n\tvar r *recorder.Recorder\n\tvar err error\n\tif os.Getenv(\"GITLAB\")
            != \"\" {\n\t\tfmt.Println(\"using ModeReplaying\")\n\t\tr, err = recorder.NewAsMode(filepath.Join(\"fixtures\",
            fixture), recorder.ModeReplaying, nil)\n\t} else {\n\t\tr, err = recorder.New(filepath.Join(\"fixtures\",
            fixture))\n\t}\n\tif err != nil {\n\t\treturn &client, r, err\n\t}\n\n\thttpClient
            := &http.Client{\n\t\tTransport: r,\n\t}\n\tclient.Config.Debug = lib.Bool(false)\n\tclient.HttpClient
            = httpClient\n\n\tr.AddFilter(func(i *cassette.Interaction) error {\n\t\tdelete(i.Request.Headers,
            \"X-Filesapi-Key\")\n\t\treturn nil\n\t})\n\treturn &client, r, nil\n}\n\nfunc
            deletePath(client *Client, path string) {\n\t_, err := client.Delete(files_sdk.FileDeleteParams{Path:
            path})\n\tresponseError, ok := err.(files_sdk.ResponseError)\n\tif ok && responseError.Type
            == \"not-found\" {\n\t} else if ok && responseError.Type == \"processing-failure/folder-not-empty\"
            {\n\t\t_, err = client.Delete(files_sdk.FileDeleteParams{Path: path, Recursive:
            lib.Bool(true)})\n\t\tresponseError, ok = err.(files_sdk.ResponseError)\n\t\tif
            ok && responseError.Type == \"not-found\" {\n\n\t\t} else if ok {\n\t\t\tpanic(err)\n\t\t}\n\t}
            else if ok {\n\t\tpanic(err)\n\t}\n}\n\nfunc buildScenario(base string, client
            *Client) {\n\tfolderClient := folder.Client{Config: client.Config}\n\n\tfolderClient.Create(files_sdk.FolderCreateParams{Path:
            base})\n\tfolderClient.Create(files_sdk.FolderCreateParams{Path: filepath.Join(base,
            \"nested_1\")})\n\tfolderClient.Create(files_sdk.FolderCreateParams{Path: filepath.Join(base,
            \"nested_1\", \"nested_2\")})\n\tfolderClient.Create(files_sdk.FolderCreateParams{Path:
            filepath.Join(base, \"nested_1\", \"nested_2\", \"nested_3\")})\n\n\tclient.Upload(strings.NewReader(\"testing
            3\"), int64(9), files_sdk.FileActionBeginUploadParams{Path: filepath.Join(base,
            \"nested_1\", \"nested_2\", \"3.text\")}, &UploadProgress{})\n\tclient.Upload(strings.NewReader(\"testing
            3\"), int64(9), files_sdk.FileActionBeginUploadParams{Path: filepath.Join(base,
            \"nested_1\", \"nested_2\", \"nested_3\", \"4.text\")}, &UploadProgress{})\n\n}\n\nfunc
            runDownloadScenario(path string, destination string, client *Client) ([]string,
            error) {\n\tvar results []string\n\terr := client.DownloadFolder(\n\t\tfiles_sdk.FolderListForParams{Path:
            path},\n\t\tdestination,\n\t\tfunc(incDownloadedBytes int64, file files_sdk.File,
            destination string, err error, message string, _ int) {\n\t\t\tif message !=
            \"\" {\n\t\t\t\tresults = append(results, message)\n\t\t\t}\n\t\t\tif err !=
            nil {\n\t\t\t\tresults = append(results, fmt.Sprint(file.Path, err))\n\t\t\t}
            else {\n\t\t\t\tresults = append(results, fmt.Sprint(\n\t\t\t\t\tfmt.Sprintf(\"%d
            bytes \", incDownloadedBytes),\n\t\t\t\t\tfmt.Sprintf(\"%s => %s\", file.Path,
            destination),\n\t\t\t\t))\n\t\t\t}\n\t\t},\n\t)\n\n\treturn results, err\n}\n\nfunc
            TestClient_UploadFolder(t *testing.T) {\n\tclient, r, err := CreateClient(\"TestClient_UploadFolder\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tassert := assert.New(t)\n\tresultsMapMutex
            := sync.RWMutex{}\n\tresults := make(map[string][]int64)\n\n\t_, err = client.UploadFolder(\n\t\t&UploadParams{\n\t\t\tSource:
            \     \"../lib\",\n\t\t\tDestination: \"golib\",\n\t\t\tProgressReporter: func(source
            string, file files_sdk.File, newBytesCount int64, batchStats UploadBatchStats,
            err error) {\n\t\t\t\tresultsMapMutex.Lock()\n\t\t\t\tresults[file.Path] = append(results[file.Path],
            newBytesCount)\n\t\t\t\tresultsMapMutex.Unlock()\n\t\t\t},\n\t\t})\n\tassert.NoError(err)\n\n\tassert.Equal(10,
            len(results))\n\tassert.Contains(results, \"golib/bool.go\")\n\tassert.Contains(results,
            \"golib/export_params.go\")\n\tassert.Contains(results, \"golib/interface.go\")\n\tassert.Contains(results,
            \"golib/iter.go\")\n\tassert.Contains(results, \"golib/string.go\")\n\tassert.Contains(results,
            \"golib/required_test.go\")\n\tassert.Contains(results, \"golib/required.go\")\n\tassert.Contains(results,
            \"golib/query.go\")\n\tassert.Contains(results, \"golib/progresswriter.go\")\n\tassert.Contains(results,
            \"golib/iter_test.go\")\n\n\tdeletePath(client, \"golib\")\n}\n\nfunc TestClient_UploadFolder_Dot(t
            *testing.T) {\n\tclient, r, err := CreateClient(\"TestClient_UploadFolder_Dot\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tassert := assert.New(t)\n\tresultsMapMutex
            := sync.RWMutex{}\n\tresults := make(map[string][]int64)\n\n\t_, err = client.UploadFolder(\n\t\t&UploadParams{\n\t\t\tSource:
            \     \".\",\n\t\t\tDestination: \"go-from-dot\",\n\t\t\tProgressReporter: func(source
            string, file files_sdk.File, newBytesCount int64, batchStats UploadBatchStats,
            err error) {\n\t\t\t\tresultsMapMutex.Lock()\n\t\t\t\tresults[file.Path] = append(results[file.Path],
            newBytesCount)\n\t\t\t\tresultsMapMutex.Unlock()\n\t\t\t},\n\t\t})\n\tassert.NoError(err)\n\n\tassert.Contains(results,
            \"go-from-dot/fixtures/TestClient_UploadFolder.yaml\")\n\tassert.Contains(results,
            \"go-from-dot/client_test.go\")\n\tassert.Contains(results, \"go-from-dot/client.go\")\n\tassert.Contains(results,
            \"go-from-dot/download.go\")\n\tassert.Contains(results, \"go-from-dot/upload.go\")\n\n\tdeletePath(client,
            \"go-from-dot\")\n}\n\nfunc TestClient_UploadFolder_Relative(t *testing.T) {\n\tclient,
            r, err := CreateClient(\"TestClient_UploadFolder_Relative\")\n\tif err != nil
            {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tassert := assert.New(t)\n\tresultsMapMutex
            := sync.RWMutex{}\n\tresults := make(map[string][]int64)\n\n\t_, err = client.UploadFolder(\n\t\t&UploadParams{\n\t\t\tSource:
            \     \"fixtures\",\n\t\t\tDestination: \"file-fixtures\",\n\t\t\tProgressReporter:
            func(source string, file files_sdk.File, newBytesCount int64, batchStats UploadBatchStats,
            err error) {\n\t\t\t\tresultsMapMutex.Lock()\n\t\t\t\tresults[file.Path] = append(results[file.Path],
            newBytesCount)\n\t\t\t\tresultsMapMutex.Unlock()\n\t\t\t},\n\t\t})\n\tassert.NoError(err)\n\n\tassert.Contains(results,
            \"file-fixtures/TestClient_UploadFolder.yaml\")\n\n\tdeletePath(client, \"file-fixtures\")\n}\n\nfunc
            TestClient_UploadFile(t *testing.T) {\n\tclient, r, err := CreateClient(\"TestClient_UploadFile\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\tassert := assert.New(t)\n\n\tuploadPath
            := \"../LICENSE\"\n\t_, err = client.UploadFile(&UploadParams{Source: uploadPath})\n\tassert.NoError(err)\n\t_,
            err1 := os.Stat(\"../tmp\")\n\tif os.IsNotExist(err1) {\n\t\tos.Mkdir(\"../tmp\",
            0700)\n\t}\n\ttempFile, err := ioutil.TempFile(\"../tmp\", \"LICENSE\")\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath, err := filepath.Abs(filepath.Dir(tempFile.Name()))\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath = path.Join(downloadPath,
            tempFile.Name())\n\tfile, err := client.DownloadToFile(files_sdk.FileDownloadParams{Path:
            \"LICENSE\"}, downloadPath)\n\tassert.NoError(err)\n\n\tassert.Equal(file.DisplayName,
            \"LICENSE\")\n\n\tdownloadData, err := ioutil.ReadFile(downloadPath)\n\tif err
            != nil {\n\t\tpanic(err)\n\t}\n\tlocalData, err := ioutil.ReadFile(uploadPath)\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\tassert.Equal(string(downloadData), string(localData))\n\tdefer
            os.Remove(tempFile.Name())\n}\n\nfunc TestClient_UploadFile_To_Existing_Dir(t
            *testing.T) {\n\tclient, r, err := CreateClient(\"TestClient_UploadFile_To_Existing_Dir\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\tassert := assert.New(t)\n\tfolderClient
            := folder.Client{Config: client.Config}\n\t_, err = folderClient.Create(files_sdk.FolderCreateParams{Path:
            \"docs\"})\n\tdefer deletePath(client, \"docs\")\n\n\tassert.NoError(err)\n\tuploadPath
            := \"../LICENSE\"\n\t_, err = client.UploadFile(&UploadParams{Source: uploadPath,
            Destination: \"docs\"})\n\tassert.NoError(err)\n\t_, err1 := os.Stat(\"../tmp\")\n\tif
            os.IsNotExist(err1) {\n\t\tos.Mkdir(\"../tmp\", 0700)\n\t}\n\ttempFile, err
            := ioutil.TempFile(\"../tmp\", \"LICENSE\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath,
            err := filepath.Abs(filepath.Dir(tempFile.Name()))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath
            = path.Join(downloadPath, tempFile.Name())\n\tfile, err := client.DownloadToFile(files_sdk.FileDownloadParams{Path:
            \"docs/LICENSE\"}, downloadPath)\n\tassert.NoError(err)\n\n\tassert.Equal(file.DisplayName,
            \"LICENSE\")\n\n\tdownloadData, err := ioutil.ReadFile(downloadPath)\n\tif err
            != nil {\n\t\tpanic(err)\n\t}\n\tlocalData, err := ioutil.ReadFile(uploadPath)\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\tassert.Equal(string(downloadData), string(localData))\n\tdefer
            os.Remove(tempFile.Name())\n}\n\nfunc TestClient_UploadFile_To_NonExistingPath(t
            *testing.T) {\n\tclient, r, err := CreateClient(\"TestClient_UploadFile_To_NonExistingPath\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\tassert := assert.New(t)\n\n\tdeletePath(client,
            \"taco\")\n\tuploadPath := \"../LICENSE\"\n\t_, err = client.UploadFile(&UploadParams{Source:
            uploadPath, Destination: \"taco\"})\n\tdefer deletePath(client, \"taco\")\n\tassert.NoError(err)\n\t_,
            err1 := os.Stat(\"../tmp\")\n\tif os.IsNotExist(err1) {\n\t\tos.Mkdir(\"../tmp\",
            0700)\n\t}\n\ttempFile, err := ioutil.TempFile(\"../tmp\", \"LICENSE\")\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath, err := filepath.Abs(filepath.Dir(tempFile.Name()))\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath = path.Join(downloadPath,
            tempFile.Name())\n\tfile, err := client.DownloadToFile(files_sdk.FileDownloadParams{Path:
            \"taco\"}, downloadPath)\n\tassert.NoError(err)\n\n\tassert.Equal(\"taco\",
            file.DisplayName, \"because the docs did not exist as a folder it becomes the
            file\")\n\n\tdownloadData, err := ioutil.ReadFile(downloadPath)\n\tassert.NoError(err)\n\tlocalData,
            err := ioutil.ReadFile(uploadPath)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tassert.Equal(string(downloadData),
            string(localData))\n\tdefer os.Remove(tempFile.Name())\n}\n\nfunc TestClient_UploadFile_To_NonExistingPath_WithSlash(t
            *testing.T) {\n\tclient, r, err := CreateClient(\"TestClient_UploadFile_To_NonExistingPath_WithSlash\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\tassert := assert.New(t)\n\n\tassert.NoError(err)\n\tuploadPath
            := \"../LICENSE\"\n\tdeletePath(client, \"docs\")\n\t_, err = client.UploadFile(&UploadParams{Source:
            uploadPath, Destination: \"docs/\"})\n\tdefer deletePath(client, \"docs\")\n\tassert.NoError(err)\n\t_,
            err1 := os.Stat(\"../tmp\")\n\tif os.IsNotExist(err1) {\n\t\tos.Mkdir(\"../tmp\",
            0700)\n\t}\n\ttempFile, err := ioutil.TempFile(\"../tmp\", \"LICENSE\")\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath, err := filepath.Abs(filepath.Dir(tempFile.Name()))\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath = path.Join(downloadPath,
            tempFile.Name())\n\tfile, err := client.DownloadToFile(files_sdk.FileDownloadParams{Path:
            \"docs/LICENSE\"}, downloadPath)\n\tassert.NoError(err)\n\n\tassert.Equal(\"file\",
            file.Type)\n\tassert.Equal(\"LICENSE\", file.DisplayName)\n\n\tdownloadData,
            err := ioutil.ReadFile(downloadPath)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlocalData,
            err := ioutil.ReadFile(uploadPath)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tassert.Equal(string(downloadData),
            string(localData))\n\tdefer os.Remove(tempFile.Name())\n}\n\nfunc TestClient_UploadFolder_as_file2(t
            *testing.T) {\n\tclient, r, err := CreateClient(\"TestClient_UploadFolder_as_file2\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\tassert := assert.New(t)\n\n\tuploadPath
            := \"../LICENSE\"\n\t_, err = client.UploadFolder(&UploadParams{Source: uploadPath})\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\t_, err1 := os.Stat(\"../tmp\")\n\tif os.IsNotExist(err1)
            {\n\t\tos.Mkdir(\"../tmp\", 0700)\n\t}\n\ttempFile, err := ioutil.TempFile(\"../tmp\",
            \"LICENSE\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath, err :=
            filepath.Abs(filepath.Dir(tempFile.Name()))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdownloadPath
            = path.Join(downloadPath, tempFile.Name())\n\tfile, err := client.DownloadToFile(files_sdk.FileDownloadParams{Path:
            \"LICENSE\"}, downloadPath)\n\tassert.NoError(err)\n\n\tassert.Equal(file.DisplayName,
            \"LICENSE\")\n\n\tdownloadData, err := ioutil.ReadFile(downloadPath)\n\tif err
            != nil {\n\t\tpanic(err)\n\t}\n\tlocalData, err := ioutil.ReadFile(uploadPath)\n\tif
            err != nil {\n\t\tpanic(err)\n\t}\n\tassert.Equal(string(downloadData), string(localData))\n\tdefer
            os.Remove(tempFile.Name())\n}\n\nfunc TestClient_DownloadFolder(t *testing.T)
            {\n\tclient, r, err := CreateClient(\"TestClient_DownloadFolder\")\n\tif err
            != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tbuildScenario(\"TestClient_DownloadFolder\",
            client)\n\n\tassert := assert.New(t)\n\tfolderClient := folder.Client{Config:
            client.Config}\n\n\tit, err := folderClient.ListFor(files_sdk.FolderListForParams{\n\t\tPerPage:
            1,\n\t\tPath:    \"TestClient_DownloadFolder\",\n\t})\n\n\tassert.NoError(err)\n\tfolders
            := files_sdk.FolderCollection{}\n\tfor it.Next() {\n\t\tfolders = append(folders,
            it.Folder())\n\t}\n\n\tassert.Len(folders, 3, \"something is wrong with cursor\")\n\n\tresults,
            err := runDownloadScenario(\"TestClient_DownloadFolder\", \"download\", client)\n\n\tassert.NoError(err)\n\n\tvar
            expected []string\n\texpected = append(expected, \"9 bytes TestClient_DownloadFolder/2.text
            => download/2.text\")\n\texpected = append(expected, \"9 bytes TestClient_DownloadFolder/1.text
            => download/1.text\")\n\texpected = append(expected, \"9 bytes TestClient_DownloadFolder/nested_1/nested_2/3.text
            => download/nested_1/nested_2/3.text\")\n\tassert.Subset(results, expected)\n\tos.RemoveAll(\"download\")\n}\n\nfunc
            TestClient_DownloadFolder_Smart(t *testing.T) {\n\tclient, r, err := CreateClient(\"TestClient_DownloadFolder_Smart\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tbuildScenario(\"TestClient_DownloadFolder_Smart\",
            client)\n\n\tassert := assert.New(t)\n\n\tresults, err := runDownloadScenario(filepath.Join(\"TestClient_DownloadFolder_Smart\",
            \"nested_1\", \"nested_2\", \"3.text\"), \"download/\", client)\n\n\tassert.NoError(err)\n\n\tvar
            expected []string\n\texpected = append(expected, \"9 bytes TestClient_DownloadFolder_Smart/nested_1/nested_2/3.text
            => download/3.text\")\n\tassert.Subset(results, expected)\n\n\tresults2, err
            := runDownloadScenario(filepath.Join(\"TestClient_DownloadFolder_Smart\", \"nested_1\",
            \"nested_2\"), \"download\", client)\n\n\tassert.NoError(err)\n\n\tvar expected2
            []string\n\texpected = append(expected2, \"9 bytes TestClient_DownloadFolder_Smart/nested_1/nested_2/3.text
            => download/3.text\")\n\texpected = append(expected2, \"9 bytes TestClient_DownloadFolder_Smart/nested_1/nested_2/nested_3/4.text
            => download/nested_3/4.text\")\n\tassert.Subset(results2, expected2)\n\n\tos.RemoveAll(\"download\")\n}\n\nfunc
            TestClient_DownloadFolder_file_to_file(t *testing.T) {\n\tclient, r, err :=
            CreateClient(\"TestClient_DownloadFolder_file_to_file\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer
            r.Stop()\n\n\tbuildScenario(\"TestClient_DownloadFolder_file_to_file\", client)\n\tassert
            := assert.New(t)\n\n\tresults, err := runDownloadScenario(filepath.Join(\"TestClient_DownloadFolder_file_to_file\",
            \"nested_1\", \"nested_2\", \"3.text\"), \"3.text\", client)\n\tassert.NoError(err)\n\n\tvar
            expected []string\n\texpected = append(expected, \"9 bytes TestClient_DownloadFolder_file_to_file/nested_1/nested_2/3.text
            => 3.text\")\n\tassert.Subset(results, expected)\n\n\tos.RemoveAll(\"3.text\")\n}\n\nfunc
            TestClient_DownloadFolder_file_to_implicit(t *testing.T) {\n\tclient, r, err
            := CreateClient(\"TestClient_DownloadFolder_file_to_implicit\")\n\tif err !=
            nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tbuildScenario(\"file_to_implicit\",
            client)\n\tassert := assert.New(t)\n\tresults, err := runDownloadScenario(filepath.Join(\"file_to_implicit\",
            \"nested_1\", \"nested_2\", \"3.text\"), \"\", client)\n\tassert.NoError(err)\n\n\tvar
            expected []string\n\texpected = append(expected, \"9 bytes file_to_implicit/nested_1/nested_2/3.text
            => 3.text\")\n\tassert.Subset(results, expected)\n\n\tos.RemoveAll(\"3.text\")\n}\n\nfunc
            TestClient_DownloadFolder_file_only(t *testing.T) {\n\tclient, r, err := CreateClient(\"TestClient_DownloadFolder_file_only\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tclient.Upload(strings.NewReader(\"hello\"),
            int64(5), files_sdk.FileActionBeginUploadParams{Path: filepath.Join(\"i am at
            the root.text\")}, &UploadProgress{})\n\tassert := assert.New(t)\n\tresults,
            err := runDownloadScenario(\"i am at the root.text\", \"\", client)\n\tassert.NoError(err)\n\n\tvar
            expected []string\n\texpected = append(expected, \"5 bytes i am at the root.text
            => i am at the root.text\")\n\tassert.Subset(results, expected)\n\n\tos.RemoveAll(\"i
            am at the root.text\")\n}\n\nfunc TestClient_DownloadToFile_No_files(t *testing.T)
            {\n\tassert := assert.New(t)\n\tclient, r, err := CreateClient(\"TestClient_DownloadToFile_No_files\")\n\tif
            err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\tfolderClient := folder.Client{Config:
            client.Config}\n\n\tfolderClient.Create(files_sdk.FolderCreateParams{Path: \"empty
            folder\"})\n\tresults, err := runDownloadScenario(\"empty folder\", \"\", client)\n\tassert.NoError(err)\n\tvar
            expected []string\n\texpected = append(expected, \"No files to download\")\n\tassert.Subset(results,
            expected)\n}\n"
          form: {}
          headers:
            Content-Length:
            - "16467"
          url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/67198d86-20b5-48d8-bcfa-77ccf4fa965b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162913Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=aXE9uUGeWO.I8Fg6xrPXyLS.2gMhZAEZrnoqS1au7aZhuMpTAughM8DYEUtLH1a9ZEK0J4NkWdOdQF62HjNdchDZ845RW.mt5dq99gbRW7la5gbYI4XUNSQLPu0_GR8T&X-Amz-Signature=5dffb304bf28a7445d5fb2881e4e310bca44f72fccb5ce0b6f3d49a8daec4660
          method: PUT
        response:
          body: ""
          headers:
            Content-Length:
            - "0"
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Etag:
            - '"cdf4e4930b5ba30933f95ce732767b82"'
            Server:
            - AmazonS3
            X-Amz-Id-2:
            - GPnU8/L9Sp5L20xOYR1RKiF2vX8MijLvP9/geR1MQQVKYdzxqMHb3ZXv0O55wiGe+DpNT0X1xJg=
            X-Amz-Request-Id:
            - 0MT0CJKQXZT73EZ0
            X-Amz-Server-Side-Encryption:
            - AES256
          status: 200 OK
          code: 200
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"392625ec1f05d9a244f6373e40e3437d\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:13-07:00","ref":"put-4169860702","size":"3364"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/go-from-dot/client.go
          method: POST
        response:
          body: '{"path":"go-from-dot/client.go","display_name":"client.go","type":"file","size":3364,"mtime":"2021-04-14T16:29:14Z","provided_mtime":"2021-04-14T16:29:13Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "260"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - e97ebb13-2e48-45f6-9f45-8ee782a00e07
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"f58d6ccddc2d66a6914a02680ca7975d\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:13-07:00","ref":"put-4169860700","size":"50695"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/go-from-dot/fixtures/TestClient_UploadFolder.yaml
          method: POST
        response:
          body: '{"path":"go-from-dot/fixtures/TestClient_UploadFolder.yaml","display_name":"TestClient_UploadFolder.yaml","type":"file","size":50695,"mtime":"2021-04-14T16:29:14Z","provided_mtime":"2021-04-14T16:29:13Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "308"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - c652a860-6cd0-4f29-ad7a-cd2aac24d525
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"cdf4e4930b5ba30933f95ce732767b82\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:13-07:00","ref":"put-4169860699","size":"16467"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/go-from-dot/client_test.go
          method: POST
        response:
          body: '{"path":"go-from-dot/client_test.go","display_name":"client_test.go","type":"file","size":16467,"mtime":"2021-04-14T16:29:14Z","provided_mtime":"2021-04-14T16:29:13Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "271"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - 3afffb8a-2403-4340-a319-8ff6248adf97
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: '{"action":"end","etags[0][etag]":"\"3cae65af72976eb473c292e88171c1a8\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:13-07:00","ref":"put-4169860697","size":"11788"}'
          form: {}
          headers:
            Content-Type:
            - application/json
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/go-from-dot/upload.go
          method: POST
        response:
          body: '{"path":"go-from-dot/upload.go","display_name":"upload.go","type":"file","size":11788,"mtime":"2021-04-14T16:29:14Z","provided_mtime":"2021-04-14T16:29:13Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "261"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - defdb066-10d1-4963-8756-7894ccf7cfcd
          status: 201 Created
          code: 201
          duration: ""
      - request:
          body: ""
          form: {}
          headers:
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/go-from-dot
          method: DELETE
        response:
          body: '{"error":"Folder go-from-dot not empty","http-code":422,"instance":"aa8151eb-fd1e-48d7-96a5-df9a4721104c","title":"Folder
            Not Empty","type":"processing-failure/folder-not-empty"}'
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Content-Length:
            - "178"
            Content-Type:
            - application/json
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - aa8151eb-fd1e-48d7-96a5-df9a4721104c
          status: 422 Unprocessable Entity
          code: 422
          duration: ""
      - request:
          body: ""
          form: {}
          headers:
            User-Agent:
            - Files.com Go SDK
          url: https://app.files.com/api/rest/v1/files/go-from-dot?recursive=true
          method: DELETE
        response:
          body: ""
          headers:
            Cache-Control:
            - no-cache, no-store, max-age=0, must-revalidate
            Date:
            - Wed, 14 Apr 2021 16:29:14 GMT
            Expires:
            - Fri, 01 Jan 1990 00:00:00 GMT
            Pragma:
            - no-cache
            Server:
            - nginx
            X-Request-Id:
            - c782daa2-7f20-4456-95e3-bb8b04d9a15a
          status: 204 No Content
          code: 204
          duration: ""
    form: {}
    headers:
      Content-Length:
      - "123507"
    url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/23fc8e74-e5a5-4f9a-8cc5-ec493f6ced75?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T162915Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=mwdV0Z9Of.cGPUheH2mjG6WhQUvLgqrsxjlCd8fLoEFopcKf0y0LAWbD2MVMDSLVvJRBeJY2adBzOHc1JMtlzd025r5gKKN5.CgEjk0fMgky96_hlP8dDxAJjEP8kfuo&X-Amz-Signature=0ac02fab27d0cf8142686db4a52434e9d5f3ea0fc8944402c289ec553e58e155
    method: PUT
  response:
    body: ""
    headers:
      Content-Length:
      - "0"
      Date:
      - Wed, 14 Apr 2021 16:29:17 GMT
      Etag:
      - '"0391ac602b13b12274c0e313908c7972"'
      Server:
      - AmazonS3
      X-Amz-Id-2:
      - tD0ZkI68I0+HnMZR+9MkrU1YzrJxax/P8vx9Ytl0HOUfzgF4cNjkiMHKQw2hhIy/T7ouvO8YbuQ=
      X-Amz-Request-Id:
      - G69H633HDZGVSWCS
      X-Amz-Server-Side-Encryption:
      - AES256
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: '{"action":"end","etags[0][etag]":"\"f58d6ccddc2d66a6914a02680ca7975d\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:15-07:00","ref":"put-4169860859","size":"50695"}'
    form: {}
    headers:
      Content-Type:
      - application/json
      User-Agent:
      - Files.com Go SDK
    url: https://app.files.com/api/rest/v1/files/file-fixtures/TestClient_UploadFolder.yaml
    method: POST
  response:
    body: '{"path":"file-fixtures/TestClient_UploadFolder.yaml","display_name":"TestClient_UploadFolder.yaml","type":"file","size":50695,"mtime":"2021-04-14T16:29:16Z","provided_mtime":"2021-04-14T16:29:15Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Length:
      - "301"
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Apr 2021 16:29:16 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - 948bd547-557f-46c6-9940-6ae6057dc2ed
    status: 201 Created
    code: 201
    duration: ""
- request:
    body: '{"action":"end","etags[0][etag]":"\"0391ac602b13b12274c0e313908c7972\"","etags[0][part]":"1","provided_mtime":"2021-04-14T09:29:16-07:00","ref":"put-4169860860","size":"123507"}'
    form: {}
    headers:
      Content-Type:
      - application/json
      User-Agent:
      - Files.com Go SDK
    url: https://app.files.com/api/rest/v1/files/file-fixtures/TestClient_UploadFolder_Dot.yaml
    method: POST
  response:
    body: '{"path":"file-fixtures/TestClient_UploadFolder_Dot.yaml","display_name":"TestClient_UploadFolder_Dot.yaml","type":"file","size":123507,"mtime":"2021-04-14T16:29:16Z","provided_mtime":"2021-04-14T16:29:16Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Length:
      - "310"
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Apr 2021 16:29:16 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - 82561af2-cde1-49b6-8a6f-d93af2f392b0
    status: 201 Created
    code: 201
    duration: ""
- request:
    body: ""
    form: {}
    headers:
      User-Agent:
      - Files.com Go SDK
    url: https://app.files.com/api/rest/v1/files/file-fixtures
    method: DELETE
  response:
    body: '{"error":"Folder file-fixtures not empty","http-code":422,"instance":"25cd42f6-24e6-412e-ad58-3f3af5dfdff9","title":"Folder
      Not Empty","type":"processing-failure/folder-not-empty"}'
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Length:
      - "180"
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Apr 2021 16:29:16 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - 25cd42f6-24e6-412e-ad58-3f3af5dfdff9
    status: 422 Unprocessable Entity
    code: 422
    duration: ""
- request:
    body: ""
    form: {}
    headers:
      User-Agent:
      - Files.com Go SDK
    url: https://app.files.com/api/rest/v1/files/file-fixtures?recursive=true
    method: DELETE
  response:
    body: ""
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Date:
      - Wed, 14 Apr 2021 16:29:16 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - 29a5196c-584c-4b8b-97c7-875ad31de705
    status: 204 No Content
    code: 204
    duration: ""
